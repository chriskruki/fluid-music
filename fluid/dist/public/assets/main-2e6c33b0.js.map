{"version":3,"file":"main-2e6c33b0.js","sources":["../../../ts/config.ts","../../../ts/webgl-utils.ts","../../../ts/shaders.ts","../../../ts/core-classes.ts","../../../ts/framebuffers.ts","../../../ts/rendering.ts","../../../ts/simulation.ts","../../../ts/input.ts","../../../ts/gui.ts","../../../ts/remote.ts","../../../ts/main.ts"],"sourcesContent":["'use strict'\r\n\r\n// Configuration settings\r\ninterface BackColor {\r\n  r: number\r\n  g: number\r\n  b: number\r\n}\r\n\r\n// Define Color interface locally to avoid circular dependencies\r\ninterface Color {\r\n  r: number\r\n  g: number\r\n  b: number\r\n}\r\n\r\ninterface FluidConfig {\r\n  SIM_RESOLUTION: number\r\n  DYE_RESOLUTION: number\r\n  CAPTURE_RESOLUTION: number\r\n  DENSITY_DISSIPATION: number\r\n  VELOCITY_DISSIPATION: number\r\n  PRESSURE: number\r\n  PRESSURE_ITERATIONS: number\r\n  CURL: number\r\n  SPLAT_RADIUS: number\r\n  SPLAT_FORCE: number\r\n  SHADING: boolean\r\n  COLORFUL: boolean\r\n  COLOR_UPDATE_SPEED: number\r\n  PAUSED: boolean\r\n  BACK_COLOR: BackColor\r\n  TRANSPARENT: boolean\r\n  BLOOM: boolean\r\n  BLOOM_ITERATIONS: number\r\n  BLOOM_RESOLUTION: number\r\n  BLOOM_INTENSITY: number\r\n  BLOOM_THRESHOLD: number\r\n  BLOOM_SOFT_KNEE: number\r\n  SUNRAYS: boolean\r\n  SUNRAYS_RESOLUTION: number\r\n  SUNRAYS_WEIGHT: number\r\n  MIRROR_MODE: boolean\r\n  SPLAT_SPEED: number\r\n  SPLAT_COUNT: number\r\n  SHOW_DEBUG: boolean\r\n}\r\n\r\nconst config: FluidConfig = {\r\n  SIM_RESOLUTION: 128,\r\n  DYE_RESOLUTION: 1024,\r\n  CAPTURE_RESOLUTION: 512,\r\n  DENSITY_DISSIPATION: 0.5,\r\n  VELOCITY_DISSIPATION: 0.1,\r\n  PRESSURE: 0.2,\r\n  PRESSURE_ITERATIONS: 20,\r\n  CURL: 5,\r\n  SPLAT_RADIUS: 0.25,\r\n  SPLAT_FORCE: 6000,\r\n  SHADING: true,\r\n  COLORFUL: true,\r\n  COLOR_UPDATE_SPEED: 10,\r\n  PAUSED: false,\r\n  BACK_COLOR: { r: 0, g: 0, b: 0 },\r\n  TRANSPARENT: false,\r\n  BLOOM: false,\r\n  BLOOM_ITERATIONS: 8,\r\n  BLOOM_RESOLUTION: 256,\r\n  BLOOM_INTENSITY: 0.1,\r\n  BLOOM_THRESHOLD: 0.6,\r\n  BLOOM_SOFT_KNEE: 0.7,\r\n  SUNRAYS: true,\r\n  SUNRAYS_RESOLUTION: 196,\r\n  SUNRAYS_WEIGHT: 0.5,\r\n  MIRROR_MODE: false,\r\n  SPLAT_SPEED: 1000,\r\n  SPLAT_COUNT: 5,\r\n  SHOW_DEBUG: false\r\n}\r\n\r\n// Update the PointerPrototype color type\r\nclass PointerPrototype {\r\n  id: number\r\n  texcoordX: number\r\n  texcoordY: number\r\n  prevTexcoordX: number\r\n  prevTexcoordY: number\r\n  deltaX: number\r\n  deltaY: number\r\n  down: boolean\r\n  moved: boolean\r\n  color: Color\r\n\r\n  constructor() {\r\n    this.id = -1\r\n    this.texcoordX = 0\r\n    this.texcoordY = 0\r\n    this.prevTexcoordX = 0\r\n    this.prevTexcoordY = 0\r\n    this.deltaX = 0\r\n    this.deltaY = 0\r\n    this.down = false\r\n    this.moved = false\r\n    this.color = { r: 30, g: 0, b: 300 }\r\n  }\r\n}\r\n\r\n// Initialize pointers array\r\nlet pointers: PointerPrototype[] = []\r\nlet splatStack: number[] = []\r\npointers.push(new PointerPrototype())\r\n\r\n// Helper functions\r\nfunction isMobile(): boolean {\r\n  return /Mobi|Android/i.test(navigator.userAgent)\r\n}\r\n\r\nfunction wrap(value: number, min: number, max: number): number {\r\n  let range = max - min\r\n  if (range == 0) return min\r\n  return ((value - min) % range) + min\r\n}\r\n\r\ninterface Resolution {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nfunction getResolution(gl: WebGLRenderingContext, resolution: number): Resolution {\r\n  let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight\r\n  if (aspectRatio < 1) aspectRatio = 1.0 / aspectRatio\r\n\r\n  let min = Math.round(resolution)\r\n  let max = Math.round(resolution * aspectRatio)\r\n\r\n  if (gl.drawingBufferWidth > gl.drawingBufferHeight) return { width: max, height: min }\r\n  else return { width: min, height: max }\r\n}\r\n\r\nfunction scaleByPixelRatio(input: number): number {\r\n  let pixelRatio = window.devicePixelRatio || 1\r\n  return Math.floor(input * pixelRatio)\r\n}\r\n\r\nexport {\r\n  config,\r\n  PointerPrototype,\r\n  pointers,\r\n  splatStack,\r\n  isMobile,\r\n  wrap,\r\n  getResolution,\r\n  scaleByPixelRatio\r\n}\r\n","'use strict'\r\n\r\nexport interface WebGLFormatObject {\r\n  internalFormat: number\r\n  format: number\r\n}\r\n\r\nexport interface WebGLExtensions {\r\n  formatRGBA: WebGLFormatObject\r\n  formatRG: WebGLFormatObject\r\n  formatR: WebGLFormatObject\r\n  halfFloatTexType: number\r\n  supportLinearFiltering: boolean\r\n}\r\n\r\nfunction getWebGLContext(canvas: HTMLCanvasElement): {\r\n  gl: WebGLRenderingContext\r\n  ext: WebGLExtensions\r\n} {\r\n  const params: WebGLContextAttributes = {\r\n    alpha: true,\r\n    depth: false,\r\n    stencil: false,\r\n    antialias: false,\r\n    preserveDrawingBuffer: false\r\n  }\r\n\r\n  let gl: WebGLRenderingContext = canvas.getContext('webgl2', params) as WebGLRenderingContext\r\n  const isWebGL2: boolean = !!gl\r\n  if (!isWebGL2) {\r\n    gl = (canvas.getContext('webgl', params) ||\r\n      canvas.getContext('experimental-webgl', params)) as WebGLRenderingContext\r\n  }\r\n\r\n  if (!gl) {\r\n    throw new Error('WebGL not supported')\r\n  }\r\n\r\n  let halfFloat: any\r\n  let supportLinearFiltering: any\r\n  if (isWebGL2) {\r\n    gl.getExtension('EXT_color_buffer_float')\r\n    supportLinearFiltering = gl.getExtension('OES_texture_float_linear')\r\n  } else {\r\n    halfFloat = gl.getExtension('OES_texture_half_float')\r\n    supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear')\r\n  }\r\n\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n\r\n  const halfFloatTexType: number = isWebGL2\r\n    ? (gl as WebGL2RenderingContext).HALF_FLOAT\r\n    : halfFloat.HALF_FLOAT_OES\r\n\r\n  // Get RGBA format with fallback\r\n  let formatRGBAResult = getSupportedFormat(\r\n    gl,\r\n    isWebGL2 ? (gl as WebGL2RenderingContext).RGBA16F : gl.RGBA,\r\n    gl.RGBA,\r\n    halfFloatTexType\r\n  )\r\n  if (!formatRGBAResult) {\r\n    formatRGBAResult = { internalFormat: gl.RGBA, format: gl.RGBA }\r\n  }\r\n  const formatRGBA = formatRGBAResult\r\n\r\n  // Get RG format with fallback\r\n  let formatRGResult = getSupportedFormat(\r\n    gl,\r\n    isWebGL2 ? (gl as WebGL2RenderingContext).RG16F : gl.RGBA,\r\n    isWebGL2 ? (gl as WebGL2RenderingContext).RG : gl.RGBA,\r\n    halfFloatTexType\r\n  )\r\n  if (!formatRGResult) {\r\n    formatRGResult = { internalFormat: gl.RGBA, format: gl.RGBA }\r\n  }\r\n  const formatRG = formatRGResult\r\n\r\n  // Get R format with fallback\r\n  let formatRResult = getSupportedFormat(\r\n    gl,\r\n    isWebGL2 ? (gl as WebGL2RenderingContext).R16F : gl.RGBA,\r\n    isWebGL2 ? (gl as WebGL2RenderingContext).RED : gl.RGBA,\r\n    halfFloatTexType\r\n  )\r\n  if (!formatRResult) {\r\n    formatRResult = { internalFormat: gl.RGBA, format: gl.RGBA }\r\n  }\r\n  const formatR = formatRResult\r\n\r\n  return {\r\n    gl,\r\n    ext: {\r\n      formatRGBA,\r\n      formatRG,\r\n      formatR,\r\n      halfFloatTexType,\r\n      supportLinearFiltering\r\n    }\r\n  }\r\n}\r\n\r\nfunction getSupportedFormat(\r\n  gl: WebGLRenderingContext,\r\n  internalFormat: number,\r\n  format: number,\r\n  type: number\r\n): WebGLFormatObject | null {\r\n  if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\r\n    switch (internalFormat) {\r\n      case (gl as WebGL2RenderingContext).R16F:\r\n        return getSupportedFormat(\r\n          gl,\r\n          (gl as WebGL2RenderingContext).RG16F,\r\n          (gl as WebGL2RenderingContext).RG,\r\n          type\r\n        )\r\n      case (gl as WebGL2RenderingContext).RG16F:\r\n        return getSupportedFormat(gl, (gl as WebGL2RenderingContext).RGBA16F, gl.RGBA, type)\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return {\r\n    internalFormat,\r\n    format\r\n  }\r\n}\r\n\r\nfunction supportRenderTextureFormat(\r\n  gl: WebGLRenderingContext,\r\n  internalFormat: number,\r\n  format: number,\r\n  type: number\r\n): boolean {\r\n  let texture: WebGLTexture = gl.createTexture()\r\n  gl.bindTexture(gl.TEXTURE_2D, texture)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null)\r\n\r\n  let fbo: WebGLFramebuffer = gl.createFramebuffer()\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\r\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)\r\n\r\n  let status: number = gl.checkFramebufferStatus(gl.FRAMEBUFFER)\r\n  return status == gl.FRAMEBUFFER_COMPLETE\r\n}\r\n\r\nfunction hashCode(s: string): number {\r\n  if (s.length == 0) return 0\r\n  let hash = 0\r\n  for (let i = 0; i < s.length; i++) {\r\n    hash = (hash << 5) - hash + s.charCodeAt(i)\r\n    hash |= 0 // Convert to 32bit integer\r\n  }\r\n  return hash\r\n}\r\n\r\nfunction compileShader(\r\n  gl: WebGLRenderingContext,\r\n  type: number,\r\n  source: string,\r\n  keywords?: string[]\r\n): WebGLShader {\r\n  source = addKeywords(source, keywords)\r\n\r\n  const shader = gl.createShader(type)\r\n  if (!shader) {\r\n    throw new Error('Unable to create shader')\r\n  }\r\n\r\n  gl.shaderSource(shader, source)\r\n  gl.compileShader(shader)\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) console.trace(gl.getShaderInfoLog(shader))\r\n\r\n  return shader\r\n}\r\n\r\nfunction addKeywords(source: string, keywords?: string[]): string {\r\n  if (keywords == null) return source\r\n  let keywordsString = ''\r\n  keywords.forEach((keyword) => {\r\n    keywordsString += '#define ' + keyword + '\\n'\r\n  })\r\n  return keywordsString + source\r\n}\r\n\r\nfunction createProgram(\r\n  gl: WebGLRenderingContext,\r\n  vertexShader: WebGLShader,\r\n  fragmentShader: WebGLShader\r\n): WebGLProgram {\r\n  let program: WebGLProgram = gl.createProgram()\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragmentShader)\r\n  gl.linkProgram(program)\r\n\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) console.trace(gl.getProgramInfoLog(program))\r\n\r\n  return program\r\n}\r\n\r\nfunction getUniforms(\r\n  gl: WebGLRenderingContext,\r\n  program: WebGLProgram\r\n): Record<string, WebGLUniformLocation> {\r\n  let uniforms: Record<string, WebGLUniformLocation> = {}\r\n  let uniformCount: number = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\r\n  for (let i = 0; i < uniformCount; i++) {\r\n    const activeUniform = gl.getActiveUniform(program, i)\r\n    if (!activeUniform) continue\r\n\r\n    let uniformName: string = activeUniform.name\r\n    const uniformLocation = gl.getUniformLocation(program, uniformName)\r\n    if (uniformLocation) {\r\n      uniforms[uniformName] = uniformLocation\r\n    }\r\n  }\r\n  return uniforms\r\n}\r\n\r\ninterface TextureScale {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nfunction getTextureScale(\r\n  texture: { width: number; height: number },\r\n  width: number,\r\n  height: number\r\n): TextureScale {\r\n  return {\r\n    x: width / texture.width,\r\n    y: height / texture.height\r\n  }\r\n}\r\n\r\nfunction CHECK_FRAMEBUFFER_STATUS(gl: WebGLRenderingContext): void {\r\n  let status: number = gl.checkFramebufferStatus(gl.FRAMEBUFFER)\r\n  if (status != gl.FRAMEBUFFER_COMPLETE) console.trace('Framebuffer error: ' + status)\r\n}\r\n\r\nexport {\r\n  getWebGLContext,\r\n  getSupportedFormat,\r\n  supportRenderTextureFormat,\r\n  hashCode,\r\n  compileShader,\r\n  addKeywords,\r\n  createProgram,\r\n  getUniforms,\r\n  getTextureScale,\r\n  CHECK_FRAMEBUFFER_STATUS\r\n}\r\n","'use strict'\r\n\r\nimport { compileShader } from './webgl-utils.js'\r\n\r\n// Vertex Shaders\r\nfunction createBaseVertexShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.VERTEX_SHADER,\r\n    `\r\n    precision highp float;\r\n\r\n    attribute vec2 aPosition;\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform vec2 texelSize;\r\n\r\n    void main () {\r\n        vUv = aPosition * 0.5 + 0.5;\r\n        vL = vUv - vec2(texelSize.x, 0.0);\r\n        vR = vUv + vec2(texelSize.x, 0.0);\r\n        vT = vUv + vec2(0.0, texelSize.y);\r\n        vB = vUv - vec2(0.0, texelSize.y);\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createBlurVertexShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.VERTEX_SHADER,\r\n    `\r\n    precision highp float;\r\n\r\n    attribute vec2 aPosition;\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    uniform vec2 texelSize;\r\n\r\n    void main () {\r\n        vUv = aPosition * 0.5 + 0.5;\r\n        float offset = 1.33333333;\r\n        vL = vUv - texelSize * offset;\r\n        vR = vUv + texelSize * offset;\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\n// Fragment Shaders\r\nfunction createBlurShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\r\n        sum += texture2D(uTexture, vL) * 0.35294117;\r\n        sum += texture2D(uTexture, vR) * 0.35294117;\r\n        gl_FragColor = sum;\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createCopyShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        gl_FragColor = texture2D(uTexture, vUv);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createClearShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float value;\r\n\r\n    void main () {\r\n        gl_FragColor = value * texture2D(uTexture, vUv);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createColorShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n\r\n    uniform vec4 color;\r\n\r\n    void main () {\r\n        gl_FragColor = color;\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createCheckerboardShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float aspectRatio;\r\n\r\n    #define SCALE 25.0\r\n\r\n    void main () {\r\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\r\n        float v = mod(uv.x + uv.y, 2.0);\r\n        v = v * 0.1 + 0.8;\r\n        gl_FragColor = vec4(vec3(v), 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nconst displayShaderSource = `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n    uniform sampler2D uBloom;\r\n    uniform sampler2D uSunrays;\r\n    uniform sampler2D uDithering;\r\n    uniform vec2 ditherScale;\r\n    uniform vec2 texelSize;\r\n\r\n    vec3 linearToGamma (vec3 color) {\r\n        color = max(color, vec3(0));\r\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\r\n    }\r\n\r\n    void main () {\r\n        vec3 c = texture2D(uTexture, vUv).rgb;\r\n\r\n    #ifdef SHADING\r\n        vec3 lc = texture2D(uTexture, vL).rgb;\r\n        vec3 rc = texture2D(uTexture, vR).rgb;\r\n        vec3 tc = texture2D(uTexture, vT).rgb;\r\n        vec3 bc = texture2D(uTexture, vB).rgb;\r\n\r\n        float dx = length(rc) - length(lc);\r\n        float dy = length(tc) - length(bc);\r\n\r\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\r\n        vec3 l = vec3(0.0, 0.0, 1.0);\r\n\r\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\r\n        c *= diffuse;\r\n    #endif\r\n\r\n    #ifdef BLOOM\r\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\r\n    #endif\r\n\r\n    #ifdef SUNRAYS\r\n        float sunrays = texture2D(uSunrays, vUv).r;\r\n        c *= sunrays;\r\n    #ifdef BLOOM\r\n        bloom *= sunrays;\r\n    #endif\r\n    #endif\r\n\r\n    #ifdef BLOOM\r\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\r\n        noise = noise * 2.0 - 1.0;\r\n        bloom += noise / 255.0;\r\n        bloom = linearToGamma(bloom);\r\n        c += bloom;\r\n    #endif\r\n\r\n        float a = max(c.r, max(c.g, c.b));\r\n        gl_FragColor = vec4(c, a);\r\n    }\r\n`\r\n\r\nfunction createBloomPrefilterShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform vec3 curve;\r\n    uniform float threshold;\r\n\r\n    void main () {\r\n        vec3 c = texture2D(uTexture, vUv).rgb;\r\n        float br = max(c.r, max(c.g, c.b));\r\n        float rq = clamp(br - curve.x, 0.0, curve.y);\r\n        rq = curve.z * rq * rq;\r\n        c *= max(rq, br - threshold) / max(br, 0.0001);\r\n        gl_FragColor = vec4(c, 0.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createBloomBlurShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 sum = vec4(0.0);\r\n        sum += texture2D(uTexture, vL);\r\n        sum += texture2D(uTexture, vR);\r\n        sum += texture2D(uTexture, vT);\r\n        sum += texture2D(uTexture, vB);\r\n        sum *= 0.25;\r\n        gl_FragColor = sum;\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createBloomFinalShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n    uniform float intensity;\r\n\r\n    void main () {\r\n        vec4 sum = vec4(0.0);\r\n        sum += texture2D(uTexture, vL);\r\n        sum += texture2D(uTexture, vR);\r\n        sum += texture2D(uTexture, vT);\r\n        sum += texture2D(uTexture, vB);\r\n        sum *= 0.25;\r\n        gl_FragColor = sum * intensity;\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createSunraysMaskShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 c = texture2D(uTexture, vUv);\r\n        float br = max(c.r, max(c.g, c.b));\r\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\r\n        gl_FragColor = c;\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createSunraysShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float weight;\r\n\r\n    #define ITERATIONS 16\r\n\r\n    void main () {\r\n        float Density = 0.3;\r\n        float Decay = 0.95;\r\n        float Exposure = 0.7;\r\n\r\n        vec2 coord = vUv;\r\n        vec2 dir = vUv - 0.5;\r\n\r\n        dir *= 1.0 / float(ITERATIONS) * Density;\r\n        float illuminationDecay = 1.0;\r\n\r\n        float color = texture2D(uTexture, vUv).a;\r\n\r\n        for (int i = 0; i < ITERATIONS; i++)\r\n        {\r\n            coord -= dir;\r\n            float col = texture2D(uTexture, coord).a;\r\n            color += col * illuminationDecay * weight;\r\n            illuminationDecay *= Decay;\r\n        }\r\n\r\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createSplatShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTarget;\r\n    uniform float aspectRatio;\r\n    uniform vec3 color;\r\n    uniform vec2 point;\r\n    uniform float radius;\r\n\r\n    void main () {\r\n        vec2 p = vUv - point.xy;\r\n        p.x *= aspectRatio;\r\n        vec3 splat = exp(-dot(p, p) / radius) * color;\r\n        vec3 base = texture2D(uTarget, vUv).xyz;\r\n        gl_FragColor = vec4(base + splat, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nexport interface WebGLSupportExtension {\r\n  supportLinearFiltering: boolean\r\n}\r\n\r\nfunction createAdvectionShader(gl: WebGLRenderingContext, ext: WebGLSupportExtension): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uVelocity;\r\n    uniform sampler2D uSource;\r\n    uniform vec2 texelSize;\r\n    uniform vec2 dyeTexelSize;\r\n    uniform float dt;\r\n    uniform float dissipation;\r\n\r\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\r\n        vec2 st = uv / tsize - 0.5;\r\n\r\n        vec2 iuv = floor(st);\r\n        vec2 fuv = fract(st);\r\n\r\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\r\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\r\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\r\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\r\n\r\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\r\n    }\r\n\r\n    void main () {\r\n    #ifdef MANUAL_FILTERING\r\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\r\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\r\n    #else\r\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\r\n        vec4 result = texture2D(uSource, coord);\r\n    #endif\r\n        float decay = 1.0 + dissipation * dt;\r\n        gl_FragColor = result / decay;\r\n    }`,\r\n    ext.supportLinearFiltering ? undefined : ['MANUAL_FILTERING']\r\n  )\r\n}\r\n\r\nfunction createDivergenceShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uVelocity, vL).x;\r\n        float R = texture2D(uVelocity, vR).x;\r\n        float T = texture2D(uVelocity, vT).y;\r\n        float B = texture2D(uVelocity, vB).y;\r\n\r\n        vec2 C = texture2D(uVelocity, vUv).xy;\r\n        if (vL.x < 0.0) { L = -C.x; }\r\n        if (vR.x > 1.0) { R = -C.x; }\r\n        if (vT.y > 1.0) { T = -C.y; }\r\n        if (vB.y < 0.0) { B = -C.y; }\r\n\r\n        float div = 0.5 * (R - L + T - B);\r\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createCurlShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uVelocity, vL).y;\r\n        float R = texture2D(uVelocity, vR).y;\r\n        float T = texture2D(uVelocity, vT).x;\r\n        float B = texture2D(uVelocity, vB).x;\r\n        float vorticity = R - L - T + B;\r\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createVorticityShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n    uniform sampler2D uCurl;\r\n    uniform float curl;\r\n    uniform float dt;\r\n\r\n    void main () {\r\n        float L = texture2D(uCurl, vL).x;\r\n        float R = texture2D(uCurl, vR).x;\r\n        float T = texture2D(uCurl, vT).x;\r\n        float B = texture2D(uCurl, vB).x;\r\n        float C = texture2D(uCurl, vUv).x;\r\n\r\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\r\n        force /= length(force) + 0.0001;\r\n        force *= curl * C;\r\n        force.y *= -1.0;\r\n\r\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\r\n        velocity += force * dt;\r\n        velocity = min(max(velocity, -1000.0), 1000.0);\r\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createPressureShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uPressure;\r\n    uniform sampler2D uDivergence;\r\n\r\n    void main () {\r\n        float L = texture2D(uPressure, vL).x;\r\n        float R = texture2D(uPressure, vR).x;\r\n        float T = texture2D(uPressure, vT).x;\r\n        float B = texture2D(uPressure, vB).x;\r\n        float C = texture2D(uPressure, vUv).x;\r\n        float divergence = texture2D(uDivergence, vUv).x;\r\n        float pressure = (L + R + B + T - divergence) * 0.25;\r\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nfunction createGradientSubtractShader(gl: WebGLRenderingContext): WebGLShader {\r\n  return compileShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uPressure;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uPressure, vL).x;\r\n        float R = texture2D(uPressure, vR).x;\r\n        float T = texture2D(uPressure, vT).x;\r\n        float B = texture2D(uPressure, vB).x;\r\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\r\n        velocity.xy -= vec2(R - L, T - B);\r\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\r\n    }\r\n`\r\n  )\r\n}\r\n\r\nexport {\r\n  createBaseVertexShader,\r\n  createBlurVertexShader,\r\n  createBlurShader,\r\n  createCopyShader,\r\n  createClearShader,\r\n  createColorShader,\r\n  createCheckerboardShader,\r\n  displayShaderSource,\r\n  createBloomPrefilterShader,\r\n  createBloomBlurShader,\r\n  createBloomFinalShader,\r\n  createSunraysMaskShader,\r\n  createSunraysShader,\r\n  createSplatShader,\r\n  createAdvectionShader,\r\n  createDivergenceShader,\r\n  createCurlShader,\r\n  createVorticityShader,\r\n  createPressureShader,\r\n  createGradientSubtractShader\r\n}\r\n","'use strict'\r\n\r\nimport { compileShader, createProgram, getUniforms, hashCode } from './webgl-utils'\r\n\r\nclass Material {\r\n  gl: WebGLRenderingContext\r\n  vertexShader: WebGLShader\r\n  fragmentShaderSource: string\r\n  programs: Record<number, WebGLProgram>\r\n  activeProgram: WebGLProgram | null\r\n  uniforms: Record<string, WebGLUniformLocation>\r\n\r\n  constructor(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShaderSource: string) {\r\n    this.gl = gl\r\n    this.vertexShader = vertexShader\r\n    this.fragmentShaderSource = fragmentShaderSource\r\n    this.programs = {}\r\n    this.activeProgram = null\r\n    this.uniforms = {}\r\n  }\r\n\r\n  setKeywords(keywords: string[]): void {\r\n    let hash = 0\r\n    for (let i = 0; i < keywords.length; i++) hash += hashCode(keywords[i])\r\n\r\n    let program = this.programs[hash]\r\n    if (program == null) {\r\n      let fragmentShader = compileShader(\r\n        this.gl,\r\n        this.gl.FRAGMENT_SHADER,\r\n        this.fragmentShaderSource,\r\n        keywords\r\n      )\r\n\r\n      const newProgram = createProgram(this.gl, this.vertexShader, fragmentShader)\r\n      if (!newProgram) {\r\n        throw new Error('Failed to create WebGL program with keywords')\r\n      }\r\n\r\n      program = newProgram\r\n      this.programs[hash] = program\r\n    }\r\n\r\n    if (program == this.activeProgram) return\r\n\r\n    this.uniforms = getUniforms(this.gl, program)\r\n    this.activeProgram = program\r\n  }\r\n\r\n  bind(): void {\r\n    if (!this.activeProgram) {\r\n      throw new Error('No active program to bind')\r\n    }\r\n    this.gl.useProgram(this.activeProgram)\r\n  }\r\n}\r\n\r\nclass Program {\r\n  gl: WebGLRenderingContext\r\n  uniforms: Record<string, WebGLUniformLocation>\r\n  program: WebGLProgram\r\n\r\n  constructor(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n    this.gl = gl\r\n    this.uniforms = {}\r\n    const program = createProgram(gl, vertexShader, fragmentShader)\r\n\r\n    // Ensure the program is created successfully\r\n    if (!program) {\r\n      throw new Error('Failed to create WebGL program')\r\n    }\r\n\r\n    this.program = program\r\n    this.uniforms = getUniforms(gl, this.program)\r\n  }\r\n\r\n  bind(): void {\r\n    this.gl.useProgram(this.program)\r\n  }\r\n}\r\n\r\nexport { Material, Program }\r\n","'use strict'\r\n\r\ninterface FBO {\r\n  texture: WebGLTexture\r\n  fbo: WebGLFramebuffer\r\n  width: number\r\n  height: number\r\n  texelSizeX: number\r\n  texelSizeY: number\r\n  attach: (id: number) => number\r\n}\r\n\r\ninterface DoubleFBO {\r\n  width: number\r\n  height: number\r\n  texelSizeX: number\r\n  texelSizeY: number\r\n  read: FBO\r\n  write: FBO\r\n  swap: () => void\r\n}\r\n\r\n// Framebuffer creation and management\r\nfunction createFBO(\r\n  gl: WebGLRenderingContext,\r\n  w: number,\r\n  h: number,\r\n  internalFormat: number,\r\n  format: number,\r\n  type: number,\r\n  param: number\r\n): FBO {\r\n  gl.activeTexture(gl.TEXTURE0)\r\n  let texture = gl.createTexture()\r\n  if (!texture) {\r\n    throw new Error('Failed to create WebGL texture')\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_2D, texture)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null)\r\n\r\n  let fbo = gl.createFramebuffer()\r\n  if (!fbo) {\r\n    throw new Error('Failed to create WebGL framebuffer')\r\n  }\r\n\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\r\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)\r\n  gl.viewport(0, 0, w, h)\r\n  gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n  let texelSizeX = 1.0 / w\r\n  let texelSizeY = 1.0 / h\r\n\r\n  return {\r\n    texture,\r\n    fbo,\r\n    width: w,\r\n    height: h,\r\n    texelSizeX,\r\n    texelSizeY,\r\n    attach(id: number): number {\r\n      gl.activeTexture(gl.TEXTURE0 + id)\r\n      gl.bindTexture(gl.TEXTURE_2D, texture)\r\n      return id\r\n    }\r\n  }\r\n}\r\n\r\nfunction createDoubleFBO(\r\n  gl: WebGLRenderingContext,\r\n  w: number,\r\n  h: number,\r\n  internalFormat: number,\r\n  format: number,\r\n  type: number,\r\n  param: number\r\n): DoubleFBO {\r\n  let fbo1 = createFBO(gl, w, h, internalFormat, format, type, param)\r\n  let fbo2 = createFBO(gl, w, h, internalFormat, format, type, param)\r\n\r\n  return {\r\n    width: w,\r\n    height: h,\r\n    texelSizeX: fbo1.texelSizeX,\r\n    texelSizeY: fbo1.texelSizeY,\r\n    get read(): FBO {\r\n      return fbo1\r\n    },\r\n    set read(value: FBO) {\r\n      fbo1 = value\r\n    },\r\n    get write(): FBO {\r\n      return fbo2\r\n    },\r\n    set write(value: FBO) {\r\n      fbo2 = value\r\n    },\r\n    swap(): void {\r\n      let temp = fbo1\r\n      fbo1 = fbo2\r\n      fbo2 = temp\r\n    }\r\n  }\r\n}\r\n\r\ntype BlitFunction = (target: FBO | null, clear?: boolean) => void\r\n\r\nfunction resizeFBO(\r\n  gl: WebGLRenderingContext,\r\n  copyProgram: any,\r\n  target: FBO,\r\n  w: number,\r\n  h: number,\r\n  internalFormat: number,\r\n  format: number,\r\n  type: number,\r\n  param: number,\r\n  blit: BlitFunction\r\n): FBO {\r\n  let newFBO = createFBO(gl, w, h, internalFormat, format, type, param)\r\n  copyProgram.bind()\r\n  gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0))\r\n  blit(newFBO)\r\n  return newFBO\r\n}\r\n\r\nfunction resizeDoubleFBO(\r\n  gl: WebGLRenderingContext,\r\n  copyProgram: any,\r\n  target: DoubleFBO,\r\n  w: number,\r\n  h: number,\r\n  internalFormat: number,\r\n  format: number,\r\n  type: number,\r\n  param: number,\r\n  blit: BlitFunction\r\n): DoubleFBO {\r\n  if (target.width == w && target.height == h) return target\r\n  target.read = resizeFBO(\r\n    gl,\r\n    copyProgram,\r\n    target.read,\r\n    w,\r\n    h,\r\n    internalFormat,\r\n    format,\r\n    type,\r\n    param,\r\n    blit\r\n  )\r\n  target.write = createFBO(gl, w, h, internalFormat, format, type, param)\r\n  target.width = w\r\n  target.height = h\r\n  target.texelSizeX = 1.0 / w\r\n  target.texelSizeY = 1.0 / h\r\n  return target\r\n}\r\n\r\ninterface TextureObject {\r\n  texture: WebGLTexture\r\n  width: number\r\n  height: number\r\n  attach: (id: number) => number\r\n}\r\n\r\nfunction createTextureAsync(gl: WebGLRenderingContext, url: string): TextureObject {\r\n  let texture = gl.createTexture()\r\n  if (!texture) {\r\n    throw new Error('Failed to create WebGL texture')\r\n  }\r\n\r\n  gl.bindTexture(gl.TEXTURE_2D, texture)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT)\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT)\r\n\r\n  // Create a placeholder white pixel texture\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0,\r\n    gl.RGB,\r\n    1,\r\n    1,\r\n    0,\r\n    gl.RGB,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255])\r\n  )\r\n\r\n  let obj: TextureObject = {\r\n    texture,\r\n    width: 1,\r\n    height: 1,\r\n    attach(id: number): number {\r\n      gl.activeTexture(gl.TEXTURE0 + id)\r\n      gl.bindTexture(gl.TEXTURE_2D, texture)\r\n      return id\r\n    }\r\n  }\r\n\r\n  let image = new Image()\r\n\r\n  image.onload = (): void => {\r\n    obj.width = image.width\r\n    obj.height = image.height\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image)\r\n  }\r\n\r\n  image.onerror = (): void => {\r\n    // Continue with the placeholder texture\r\n  }\r\n\r\n  image.src = url\r\n\r\n  return obj\r\n}\r\n\r\n// Setup the blit function for drawing to framebuffers\r\nfunction setupBlit(gl: WebGLRenderingContext): BlitFunction {\r\n  const buffer = gl.createBuffer()\r\n  if (!buffer) {\r\n    throw new Error('Failed to create WebGL buffer')\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW)\r\n\r\n  const indexBuffer = gl.createBuffer()\r\n  if (!indexBuffer) {\r\n    throw new Error('Failed to create WebGL index buffer')\r\n  }\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW)\r\n  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0)\r\n  gl.enableVertexAttribArray(0)\r\n\r\n  return (target: FBO | null, clear: boolean = false): void => {\r\n    if (target == null) {\r\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight)\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null)\r\n    } else {\r\n      gl.viewport(0, 0, target.width, target.height)\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo)\r\n    }\r\n    if (clear) {\r\n      gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n      gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)\r\n  }\r\n}\r\n\r\nexport {\r\n  createFBO,\r\n  createDoubleFBO,\r\n  resizeFBO,\r\n  resizeDoubleFBO,\r\n  createTextureAsync,\r\n  setupBlit,\r\n  FBO,\r\n  DoubleFBO,\r\n  BlitFunction,\r\n  TextureObject\r\n}\r\n","'use strict'\r\n\r\nimport { config } from './config'\r\nimport { getTextureScale } from './webgl-utils'\r\nimport { FBO } from './framebuffers'\r\nimport { Color } from './simulation'\r\nimport { Material, Program } from './core-classes'\r\n\r\n// Normalized color interface\r\ninterface NormalizedColor {\r\n  r: number\r\n  g: number\r\n  b: number\r\n}\r\n\r\n// Rendering functions\r\nfunction render(\r\n  gl: WebGLRenderingContext,\r\n  target: FBO | null,\r\n  dye: { read: FBO; write: FBO; swap: () => void },\r\n  bloom: FBO,\r\n  sunrays: FBO,\r\n  _sunraysTemp: FBO,\r\n  ditheringTexture: {\r\n    texture: WebGLTexture\r\n    width: number\r\n    height: number\r\n    attach: (id: number) => number\r\n  },\r\n  displayMaterial: Material,\r\n  colorProgram: Program,\r\n  checkerboardProgram: Program,\r\n  blit: (destination: FBO | null) => void,\r\n  bloomFramebuffers: FBO[],\r\n  bloomPrefilterProgram: Program,\r\n  bloomBlurProgram: Program,\r\n  bloomFinalProgram: Program,\r\n  sunraysMaskProgram: Program,\r\n  sunraysProgram: Program,\r\n  blurProgram: Program\r\n): void {\r\n  if (!gl || !gl.canvas) {\r\n    return\r\n  }\r\n\r\n  if (config.BLOOM)\r\n    applyBloom(\r\n      gl,\r\n      dye.read,\r\n      bloom,\r\n      bloomFramebuffers,\r\n      bloomPrefilterProgram,\r\n      bloomBlurProgram,\r\n      bloomFinalProgram,\r\n      blit\r\n    )\r\n  if (config.SUNRAYS) {\r\n    applySunrays(gl, dye.read, dye.write, sunrays, sunraysMaskProgram, sunraysProgram, blit)\r\n    blur(gl, sunrays, _sunraysTemp, 1, blurProgram, blit)\r\n  }\r\n\r\n  if (target == null || !config.TRANSPARENT) {\r\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.enable(gl.BLEND)\r\n  } else {\r\n    gl.disable(gl.BLEND)\r\n  }\r\n\r\n  if (!config.TRANSPARENT)\r\n    drawColor(gl, target, normalizeColor(config.BACK_COLOR), colorProgram, blit)\r\n  if (target == null && config.TRANSPARENT) drawCheckerboard(gl, target, checkerboardProgram, blit)\r\n\r\n  drawDisplay(\r\n    gl,\r\n    target,\r\n    dye,\r\n    bloom,\r\n    sunrays,\r\n    _sunraysTemp,\r\n    ditheringTexture,\r\n    displayMaterial,\r\n    blit\r\n  )\r\n}\r\n\r\nfunction drawColor(\r\n  gl: WebGLRenderingContext,\r\n  target: FBO | null,\r\n  color: NormalizedColor,\r\n  colorProgram: Program,\r\n  blit: (destination: FBO | null) => void\r\n): void {\r\n  colorProgram.bind()\r\n  gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1)\r\n  blit(target)\r\n}\r\n\r\nfunction drawCheckerboard(\r\n  gl: WebGLRenderingContext,\r\n  target: FBO | null,\r\n  checkerboardProgram: Program,\r\n  blit: (destination: FBO | null) => void\r\n): void {\r\n  checkerboardProgram.bind()\r\n  gl.uniform1f(checkerboardProgram.uniforms.aspectRatio, gl.canvas.width / gl.canvas.height)\r\n  blit(target)\r\n}\r\n\r\nfunction drawDisplay(\r\n  gl: WebGLRenderingContext,\r\n  target: FBO | null,\r\n  dye: { read: FBO; write: FBO },\r\n  bloom: FBO,\r\n  sunrays: FBO,\r\n  _sunraysTemp: FBO,\r\n  ditheringTexture: {\r\n    texture: WebGLTexture\r\n    width: number\r\n    height: number\r\n    attach: (id: number) => number\r\n  },\r\n  displayMaterial: Material,\r\n  blit: (destination: FBO | null) => void\r\n): void {\r\n  let width = target == null ? gl.drawingBufferWidth : target.width\r\n  let height = target == null ? gl.drawingBufferHeight : target.height\r\n\r\n  displayMaterial.bind()\r\n  if (config.SHADING) gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height)\r\n  gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0))\r\n  if (config.BLOOM) {\r\n    gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1))\r\n    gl.uniform1i(displayMaterial.uniforms.uDithering, ditheringTexture.attach(2))\r\n    let scale = getTextureScale(ditheringTexture, width, height)\r\n    gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y)\r\n  }\r\n  if (config.SUNRAYS) gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3))\r\n\r\n  blit(target)\r\n}\r\n\r\nfunction applyBloom(\r\n  gl: WebGLRenderingContext,\r\n  source: FBO,\r\n  destination: FBO,\r\n  bloomFramebuffers: FBO[],\r\n  bloomPrefilterProgram: Program,\r\n  bloomBlurProgram: Program,\r\n  bloomFinalProgram: Program,\r\n  blit: (destination: FBO | null) => void\r\n): void {\r\n  if (bloomFramebuffers.length < 2) return\r\n\r\n  let last = destination\r\n\r\n  gl.disable(gl.BLEND)\r\n  bloomPrefilterProgram.bind()\r\n  let knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001\r\n  let curve0 = config.BLOOM_THRESHOLD - knee\r\n  let curve1 = knee * 2\r\n  let curve2 = 0.25 / knee\r\n  gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2)\r\n  gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD)\r\n  gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0))\r\n  blit(last)\r\n\r\n  bloomBlurProgram.bind()\r\n  for (let i = 0; i < bloomFramebuffers.length; i++) {\r\n    let dest = bloomFramebuffers[i]\r\n    gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY)\r\n    gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0))\r\n    blit(dest)\r\n    last = dest\r\n  }\r\n\r\n  gl.blendFunc(gl.ONE, gl.ONE)\r\n  gl.enable(gl.BLEND)\r\n\r\n  for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\r\n    let baseTex = bloomFramebuffers[i]\r\n    gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY)\r\n    gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0))\r\n    gl.viewport(0, 0, baseTex.width, baseTex.height)\r\n    blit(baseTex)\r\n    last = baseTex\r\n  }\r\n\r\n  gl.disable(gl.BLEND)\r\n  bloomFinalProgram.bind()\r\n  gl.uniform2f(bloomFinalProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY)\r\n  gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0))\r\n  gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY)\r\n  blit(destination)\r\n}\r\n\r\nfunction applySunrays(\r\n  gl: WebGLRenderingContext,\r\n  source: FBO,\r\n  mask: FBO,\r\n  destination: FBO,\r\n  sunraysMaskProgram: Program,\r\n  sunraysProgram: Program,\r\n  blit: (destination: FBO | null) => void\r\n): void {\r\n  gl.disable(gl.BLEND)\r\n  sunraysMaskProgram.bind()\r\n  gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source.attach(0))\r\n  blit(mask)\r\n\r\n  sunraysProgram.bind()\r\n  gl.uniform1f(sunraysProgram.uniforms.weight, config.SUNRAYS_WEIGHT)\r\n  gl.uniform1i(sunraysProgram.uniforms.uTexture, mask.attach(0))\r\n  blit(destination)\r\n}\r\n\r\nfunction blur(\r\n  gl: WebGLRenderingContext,\r\n  target: FBO,\r\n  temp: FBO,\r\n  iterations: number,\r\n  blurProgram: Program,\r\n  blit: (destination: FBO | null) => void\r\n): void {\r\n  blurProgram.bind()\r\n  for (let i = 0; i < iterations; i++) {\r\n    gl.uniform2f(blurProgram.uniforms.texelSize, target.texelSizeX, 0.0)\r\n    gl.uniform1i(blurProgram.uniforms.uTexture, target.attach(0))\r\n    blit(temp)\r\n\r\n    gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, target.texelSizeY)\r\n    gl.uniform1i(blurProgram.uniforms.uTexture, temp.attach(0))\r\n    blit(target)\r\n  }\r\n}\r\n\r\nfunction normalizeColor(input: Color): NormalizedColor {\r\n  let output: NormalizedColor = {\r\n    r: input.r / 255,\r\n    g: input.g / 255,\r\n    b: input.b / 255\r\n  }\r\n  return output\r\n}\r\n\r\nexport {\r\n  render,\r\n  drawColor,\r\n  drawCheckerboard,\r\n  drawDisplay,\r\n  applyBloom,\r\n  applySunrays,\r\n  blur,\r\n  normalizeColor\r\n}\r\n\r\n// Export the interface type properly\r\nexport type { NormalizedColor }\r\n","'use strict'\r\n\r\nimport { config } from './config'\r\nimport { FBO, DoubleFBO } from './framebuffers'\r\nimport { Program } from './core-classes'\r\n\r\n// Color interface for simulation\r\ninterface Color {\r\n  r: number\r\n  g: number\r\n  b: number\r\n}\r\n\r\n// Fluid simulation functions\r\nfunction step(\r\n  gl: WebGLRenderingContext,\r\n  dt: number,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  curl: FBO,\r\n  divergence: FBO,\r\n  pressure: DoubleFBO,\r\n  curlProgram: Program,\r\n  vorticityProgram: Program,\r\n  divergenceProgram: Program,\r\n  clearProgram: Program,\r\n  pressureProgram: Program,\r\n  gradienSubtractProgram: Program,\r\n  advectionProgram: Program,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  gl.disable(gl.BLEND)\r\n\r\n  curlProgram.bind()\r\n  gl.uniform2f(curlProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0))\r\n  blit(curl)\r\n\r\n  vorticityProgram.bind()\r\n  gl.uniform2f(vorticityProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0))\r\n  gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1))\r\n  gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL)\r\n  gl.uniform1f(vorticityProgram.uniforms.dt, dt)\r\n  blit(velocity.write)\r\n  velocity.swap()\r\n\r\n  divergenceProgram.bind()\r\n  gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0))\r\n  blit(divergence)\r\n\r\n  clearProgram.bind()\r\n  gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0))\r\n  gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE)\r\n  blit(pressure.write)\r\n  pressure.swap()\r\n\r\n  pressureProgram.bind()\r\n  gl.uniform2f(pressureProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0))\r\n  for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\r\n    gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1))\r\n    blit(pressure.write)\r\n    pressure.swap()\r\n  }\r\n\r\n  gradienSubtractProgram.bind()\r\n  gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0))\r\n  gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1))\r\n  blit(velocity.write)\r\n  velocity.swap()\r\n\r\n  // Advect velocity first\r\n  advectionProgram.bind()\r\n  gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0))\r\n  gl.uniform1i(advectionProgram.uniforms.uSource, velocity.read.attach(0))\r\n  gl.uniform1f(advectionProgram.uniforms.dt, dt)\r\n  gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION)\r\n  blit(velocity.write)\r\n  velocity.swap()\r\n\r\n  // Then advect dye using the updated velocity field\r\n  advectionProgram.bind()\r\n  gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY)\r\n  gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye.texelSizeX, dye.texelSizeY)\r\n  gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0))\r\n  gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1))\r\n  gl.uniform1f(advectionProgram.uniforms.dt, dt)\r\n  gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION)\r\n  blit(dye.write)\r\n  dye.swap()\r\n}\r\n\r\ninterface Pointer {\r\n  texcoordX: number\r\n  texcoordY: number\r\n  deltaX: number\r\n  deltaY: number\r\n  color: Color\r\n}\r\n\r\nfunction splatPointer(\r\n  gl: WebGLRenderingContext,\r\n  pointer: Pointer,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  let dx = pointer.deltaX * config.SPLAT_FORCE\r\n  let dy = pointer.deltaY * config.SPLAT_FORCE\r\n  splat(\r\n    gl,\r\n    pointer.texcoordX,\r\n    pointer.texcoordY,\r\n    dx,\r\n    dy,\r\n    pointer.color,\r\n    splatProgram,\r\n    velocity,\r\n    dye,\r\n    canvas,\r\n    blit\r\n  )\r\n}\r\n\r\nfunction multipleSplats(\r\n  gl: WebGLRenderingContext,\r\n  amount: number,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  for (let i = 0; i < amount; i++) {\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    const x = Math.random()\r\n    const y = Math.random()\r\n    const dx = 1000 * (Math.random() - 0.5)\r\n    const dy = 1000 * (Math.random() - 0.5)\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\nfunction splat(\r\n  gl: WebGLRenderingContext,\r\n  x: number,\r\n  y: number,\r\n  dx: number,\r\n  dy: number,\r\n  color: Color,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  splatProgram.bind()\r\n  gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0))\r\n  gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height)\r\n  gl.uniform2f(splatProgram.uniforms.point, x, y)\r\n  gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0)\r\n  gl.uniform1f(splatProgram.uniforms.radius, correctRadius(config.SPLAT_RADIUS / 100.0, canvas))\r\n  blit(velocity.write)\r\n  velocity.swap()\r\n\r\n  gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0))\r\n  gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b)\r\n  blit(dye.write)\r\n  dye.swap()\r\n}\r\n\r\nfunction correctRadius(radius: number, canvas: HTMLCanvasElement): number {\r\n  let aspectRatio = canvas.width / canvas.height\r\n  if (aspectRatio > 1) radius *= aspectRatio\r\n  return radius\r\n}\r\n\r\n// Directional splat functions\r\nfunction createSplatsRight(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const centerY = 0.5 // Center of the screen in normalized coordinates\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n  const splatInterval = 0.1 // Interval between splats in normalized coordinates\r\n  const splatSpeed = config.SPLAT_SPEED // Use config setting\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = i * splatInterval\r\n    const y = centerY\r\n    const dx = splatSpeed\r\n    const dy = 0\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\nfunction createSplatsLeft(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const centerY = 0.5\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n  const splatInterval = 0.1\r\n  const splatSpeed = -config.SPLAT_SPEED // Use config setting\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = 1 - i * splatInterval\r\n    const y = centerY\r\n    const dx = splatSpeed\r\n    const dy = 0\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\nfunction createSplatsUp(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const centerX = 0.5\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n  const splatInterval = 0.1\r\n  const splatSpeed = config.SPLAT_SPEED // Use config setting\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = centerX\r\n    const y = i * splatInterval\r\n    const dx = 0\r\n    const dy = splatSpeed\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\nfunction createSplatsHorizontal(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n  const splatInterval = 0.1\r\n  const splatSpeed = config.SPLAT_SPEED // Use config setting\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = 1 - i * splatInterval\r\n    const y = 0.4\r\n    const dx = -splatSpeed\r\n    const dy = 0\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = i * splatInterval\r\n    const y = 0.6\r\n    const dx = splatSpeed\r\n    const dy = 0\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\nfunction createSplatsVertical(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n  const splatInterval = 0.1\r\n  const splatSpeed = config.SPLAT_SPEED // Use config setting\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = 0.4\r\n    const y = 1 - i * splatInterval\r\n    const dx = 0\r\n    const dy = -splatSpeed\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = 0.6\r\n    const y = 1 - i * splatInterval\r\n    const dx = 0\r\n    const dy = -splatSpeed\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\nfunction createSplatsDown(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const centerX = 0.5\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n  const splatInterval = 0.1\r\n  const splatSpeed = -config.SPLAT_SPEED // Use config setting\r\n\r\n  for (let i = 0; i < splatCount; i++) {\r\n    const x = centerX\r\n    const y = 1 - i * splatInterval\r\n    const dx = 0\r\n    const dy = splatSpeed\r\n    const color = generateColor()\r\n    color.r *= 10.0\r\n    color.g *= 10.0\r\n    color.b *= 10.0\r\n    splat(gl, x, y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n}\r\n\r\ninterface Corner {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nfunction createCornerSplats(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  const centerX = 0.5 // Center of the screen in normalized coordinates\r\n  const centerY = 0.5 // Center of the screen in normalized coordinates\r\n  const splatSpeed = config.SPLAT_SPEED // Use config setting\r\n  const splatCount = config.SPLAT_COUNT // Use config setting\r\n\r\n  // Define the corners\r\n  const corners: Corner[] = [\r\n    { x: 0, y: 0 }, // Top-left corner\r\n    { x: 1, y: 0 }, // Top-right corner\r\n    { x: 0, y: 1 }, // Bottom-left corner\r\n    { x: 1, y: 1 } // Bottom-right corner\r\n  ]\r\n\r\n  // Create splats from each corner towards the center\r\n  corners.forEach((corner) => {\r\n    for (let i = 0; i < splatCount; i++) {\r\n      const dx = (centerX - corner.x) * splatSpeed * 20\r\n      const dy = (centerY - corner.y) * splatSpeed * 20\r\n      const color = generateColor()\r\n      color.r *= 10.0\r\n      color.g *= 10.0\r\n      color.b *= 10.0\r\n      splat(gl, corner.x, corner.y, dx, dy, color, splatProgram, velocity, dye, canvas, blit)\r\n    }\r\n  })\r\n}\r\n\r\nfunction generateColor(): Color {\r\n  let c = HSVtoRGB(Math.random(), 1.0, 1.0)\r\n  c.r *= 0.15\r\n  c.g *= 0.15\r\n  c.b *= 0.15\r\n  return c\r\n}\r\n\r\nfunction HSVtoRGB(h: number, s: number, v: number): Color {\r\n  let r = 0,\r\n    g = 0,\r\n    b = 0,\r\n    i = 0,\r\n    f = 0,\r\n    p = 0,\r\n    q = 0,\r\n    t = 0\r\n  i = Math.floor(h * 6)\r\n  f = h * 6 - i\r\n  p = v * (1 - s)\r\n  q = v * (1 - f * s)\r\n  t = v * (1 - (1 - f) * s)\r\n\r\n  switch (i % 6) {\r\n    case 0:\r\n      r = v\r\n      g = t\r\n      b = p\r\n      break\r\n    case 1:\r\n      r = q\r\n      g = v\r\n      b = p\r\n      break\r\n    case 2:\r\n      r = p\r\n      g = v\r\n      b = t\r\n      break\r\n    case 3:\r\n      r = p\r\n      g = q\r\n      b = v\r\n      break\r\n    case 4:\r\n      r = t\r\n      g = p\r\n      b = v\r\n      break\r\n    case 5:\r\n      r = v\r\n      g = p\r\n      b = q\r\n      break\r\n  }\r\n\r\n  return {\r\n    r,\r\n    g,\r\n    b\r\n  }\r\n}\r\n\r\nexport {\r\n  step,\r\n  splat,\r\n  splatPointer,\r\n  multipleSplats,\r\n  createSplatsRight,\r\n  createSplatsLeft,\r\n  createSplatsUp,\r\n  createSplatsDown,\r\n  createSplatsHorizontal,\r\n  createSplatsVertical,\r\n  createCornerSplats,\r\n  generateColor,\r\n  Color\r\n}\r\n","'use strict'\r\n\r\nimport { config, pointers, PointerPrototype, splatStack, scaleByPixelRatio } from './config'\r\nimport { generateColor } from './simulation'\r\n\r\n// Input handling functions\r\nfunction updatePointerDownData(\r\n  pointer: PointerPrototype,\r\n  id: number,\r\n  posX: number,\r\n  posY: number,\r\n  canvas: HTMLCanvasElement\r\n): void {\r\n  pointer.id = id\r\n  pointer.down = true\r\n  pointer.moved = false\r\n  pointer.texcoordX = posX / canvas.width\r\n  pointer.texcoordY = 1.0 - posY / canvas.height\r\n  pointer.prevTexcoordX = pointer.texcoordX\r\n  pointer.prevTexcoordY = pointer.texcoordY\r\n  pointer.deltaX = 0\r\n  pointer.deltaY = 0\r\n  pointer.color = generateColor()\r\n}\r\n\r\nfunction updatePointerMoveData(\r\n  pointer: PointerPrototype,\r\n  posX: number,\r\n  posY: number,\r\n  canvas: HTMLCanvasElement\r\n): void {\r\n  pointer.prevTexcoordX = pointer.texcoordX\r\n  pointer.prevTexcoordY = pointer.texcoordY\r\n  pointer.texcoordX = posX / canvas.width\r\n  pointer.texcoordY = 1.0 - posY / canvas.height\r\n  pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX, canvas)\r\n  pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY, canvas)\r\n  pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0\r\n}\r\n\r\nfunction updatePointerUpData(pointer: PointerPrototype): void {\r\n  pointer.down = false\r\n}\r\n\r\nfunction correctDeltaX(delta: number, canvas: HTMLCanvasElement): number {\r\n  let aspectRatio = canvas.width / canvas.height\r\n  if (aspectRatio < 1) delta *= aspectRatio\r\n  return delta\r\n}\r\n\r\nfunction correctDeltaY(delta: number, canvas: HTMLCanvasElement): number {\r\n  let aspectRatio = canvas.width / canvas.height\r\n  if (aspectRatio > 1) delta /= aspectRatio\r\n  return delta\r\n}\r\n\r\n// Setup event listeners for input\r\nfunction setupEventListeners(\r\n  canvas: HTMLCanvasElement,\r\n  splatPointer: (pointer: PointerPrototype) => void\r\n): void {\r\n  canvas.addEventListener('mousedown', (e: MouseEvent) => {\r\n    let posX = scaleByPixelRatio(e.offsetX)\r\n    let posY = scaleByPixelRatio(e.offsetY)\r\n    let pointer = pointers.find((p) => p.id == -1)\r\n    if (pointer == null) pointer = new PointerPrototype()\r\n    updatePointerDownData(pointer, -1, posX, posY, canvas)\r\n  })\r\n\r\n  canvas.addEventListener('mousemove', (e: MouseEvent) => {\r\n    let pointer = pointers[0]\r\n    if (!pointer.down) return\r\n    let posX = scaleByPixelRatio(e.offsetX)\r\n    let posY = scaleByPixelRatio(e.offsetY)\r\n    updatePointerMoveData(pointer, posX, posY, canvas)\r\n    // Ensure the pointer moves get processed directly\r\n    splatPointer(pointer)\r\n  })\r\n\r\n  window.addEventListener('mouseup', () => {\r\n    updatePointerUpData(pointers[0])\r\n  })\r\n\r\n  canvas.addEventListener('touchstart', (e: TouchEvent) => {\r\n    e.preventDefault()\r\n    const touches = e.targetTouches\r\n    while (touches.length >= pointers.length) pointers.push(new PointerPrototype())\r\n    for (let i = 0; i < touches.length; i++) {\r\n      let posX = scaleByPixelRatio(touches[i].pageX)\r\n      let posY = scaleByPixelRatio(touches[i].pageY)\r\n      updatePointerDownData(pointers[i + 1], touches[i].identifier, posX, posY, canvas)\r\n    }\r\n  })\r\n\r\n  canvas.addEventListener(\r\n    'touchmove',\r\n    (e: TouchEvent) => {\r\n      e.preventDefault()\r\n      const touches = e.targetTouches\r\n      for (let i = 0; i < touches.length; i++) {\r\n        let pointer = pointers[i + 1]\r\n        if (!pointer.down) continue\r\n        let posX = scaleByPixelRatio(touches[i].pageX)\r\n        let posY = scaleByPixelRatio(touches[i].pageY)\r\n        updatePointerMoveData(pointer, posX, posY, canvas)\r\n        // Ensure touch moves get processed directly\r\n        splatPointer(pointer)\r\n      }\r\n    },\r\n    false\r\n  )\r\n\r\n  window.addEventListener('touchend', (e: TouchEvent) => {\r\n    const touches = e.changedTouches\r\n    for (let i = 0; i < touches.length; i++) {\r\n      let pointer = pointers.find((p) => p.id == touches[i].identifier)\r\n      if (pointer == null) continue\r\n      updatePointerUpData(pointer)\r\n    }\r\n  })\r\n\r\n  window.addEventListener('keydown', (e: KeyboardEvent) => {\r\n    if (e.code === 'KeyP') config.PAUSED = !config.PAUSED\r\n    if (e.key === ' ') {\r\n      // Force multiple splats on spacebar press\r\n      splatStack.push(parseInt(Math.random() * 20 + '') + 5)\r\n    }\r\n  })\r\n}\r\n\r\nexport {\r\n  updatePointerDownData,\r\n  updatePointerMoveData,\r\n  updatePointerUpData,\r\n  correctDeltaX,\r\n  correctDeltaY,\r\n  setupEventListeners\r\n}\r\n","'use strict'\r\n\r\nimport { config, isMobile } from './config'\r\nimport { FBO } from './framebuffers'\r\n\r\n// Declare the dat.GUI type\r\ndeclare const dat: {\r\n  GUI: new (options?: { width: number }) => {\r\n    add: (\r\n      obj: any,\r\n      prop: string,\r\n      ...args: any[]\r\n    ) => {\r\n      name: (name: string) => any\r\n      onFinishChange: (callback: () => void) => any\r\n      step: (step: number) => any\r\n      listen: () => any\r\n    }\r\n    addColor: (\r\n      obj: any,\r\n      prop: string\r\n    ) => {\r\n      name: (name: string) => any\r\n    }\r\n    addFolder: (name: string) => any\r\n    close: () => void\r\n  }\r\n}\r\n\r\n// GUI setup with dat.GUI\r\nfunction startGUI(\r\n  createSplatsHorizontal: () => void,\r\n  createSplatsVertical: () => void,\r\n  createSplatsRight: () => void,\r\n  createSplatsLeft: () => void,\r\n  createSplatsUp: () => void,\r\n  createSplatsDown: () => void,\r\n  createCornerSplats: () => void,\r\n  initFramebuffers: () => void,\r\n  updateKeywords: () => void\r\n): any {\r\n  var gui = new dat.GUI({ width: 300 })\r\n  gui\r\n    .add(config, 'DYE_RESOLUTION', {\r\n      high: 1024,\r\n      medium: 512,\r\n      low: 256,\r\n      'very low': 128\r\n    })\r\n    .name('quality')\r\n    .onFinishChange(initFramebuffers)\r\n  gui\r\n    .add(config, 'SIM_RESOLUTION', { 32: 32, 64: 64, 128: 128, 256: 256 })\r\n    .name('sim resolution')\r\n    .onFinishChange(initFramebuffers)\r\n  gui.add(config, 'DENSITY_DISSIPATION', 0, 4.0).name('density diffusion')\r\n  gui.add(config, 'VELOCITY_DISSIPATION', 0, 4.0).name('velocity diffusion')\r\n  gui.add(config, 'PRESSURE', 0.0, 1.0).name('pressure')\r\n  gui.add(config, 'CURL', 0, 50).name('vorticity').step(1)\r\n  gui.add(config, 'SPLAT_RADIUS', 0.01, 1.0).name('splat radius')\r\n  gui.add(config, 'SHADING').name('shading').onFinishChange(updateKeywords)\r\n  gui.add(config, 'COLORFUL').name('colorful')\r\n  gui.add(config, 'PAUSED').name('paused').listen()\r\n  gui.add(config, 'SPLAT_SPEED', 100, 2000).name('splat speed') // New setting for splat speed\r\n  gui.add(config, 'SPLAT_COUNT', 1, 50).name('splat count') // New setting for splat count\r\n  gui\r\n    .add(config, 'SHOW_DEBUG')\r\n    .name('show debug info')\r\n    .onChange(() => {\r\n      const debugElement = document.getElementById('debug-info')\r\n      if (debugElement) {\r\n        debugElement.style.display = config.SHOW_DEBUG ? 'block' : 'none'\r\n      }\r\n    })\r\n\r\n  let splatFolder = gui.addFolder('Splats')\r\n  makeFunGUI(splatFolder, createSplatsRight, 'Splats Right')\r\n  makeFunGUI(splatFolder, createSplatsLeft, 'Splats Left')\r\n  makeFunGUI(splatFolder, createSplatsVertical, 'Splats Vertical')\r\n  makeFunGUI(splatFolder, createSplatsHorizontal, 'Splats Horizontal')\r\n  makeFunGUI(splatFolder, createSplatsUp, 'Splats Up')\r\n  makeFunGUI(splatFolder, createSplatsDown, 'Splats Down')\r\n  makeFunGUI(splatFolder, createCornerSplats, 'Corner Splats')\r\n\r\n  gui.add(config, 'MIRROR_MODE').name('Mirror Mode')\r\n\r\n  let bloomFolder = gui.addFolder('Bloom')\r\n  bloomFolder.add(config, 'BLOOM').name('enabled').onFinishChange(updateKeywords)\r\n  bloomFolder.add(config, 'BLOOM_INTENSITY', 0.1, 2.0).name('intensity')\r\n  bloomFolder.add(config, 'BLOOM_THRESHOLD', 0.0, 1.0).name('threshold')\r\n\r\n  let sunraysFolder = gui.addFolder('Sunrays')\r\n  sunraysFolder.add(config, 'SUNRAYS').name('enabled').onFinishChange(updateKeywords)\r\n  sunraysFolder.add(config, 'SUNRAYS_WEIGHT', 0.3, 1.0).name('weight')\r\n\r\n  let captureFolder = gui.addFolder('Capture')\r\n  captureFolder.addColor(config, 'BACK_COLOR').name('background color')\r\n  captureFolder.add(config, 'TRANSPARENT').name('transparent')\r\n\r\n  if (isMobile()) gui.close()\r\n\r\n  return gui\r\n}\r\n\r\n// Interface for WebGL extensions\r\ninterface WebGLExtensions {\r\n  formatRGBA: {\r\n    internalFormat: number\r\n    format: number\r\n  }\r\n  halfFloatTexType: number\r\n}\r\n\r\n// Screenshot capture functionality\r\nfunction captureScreenshot(\r\n  gl: WebGLRenderingContext,\r\n  ext: WebGLExtensions,\r\n  getResolution: (resolution: number) => { width: number; height: number },\r\n  createFBO: (\r\n    gl: WebGLRenderingContext,\r\n    w: number,\r\n    h: number,\r\n    internalFormat: number,\r\n    format: number,\r\n    type: number,\r\n    param: number\r\n  ) => FBO,\r\n  render: (target: FBO) => void,\r\n  framebufferToTexture: (gl: WebGLRenderingContext, target: FBO) => Float32Array,\r\n  normalizeTexture: (texture: Float32Array, width: number, height: number) => Uint8Array,\r\n  textureToCanvas: (texture: Uint8Array, width: number, height: number) => HTMLCanvasElement,\r\n  downloadURI: (filename: string, uri: string) => void\r\n): void {\r\n  let res = getResolution(config.CAPTURE_RESOLUTION)\r\n  let target = createFBO(\r\n    gl,\r\n    res.width,\r\n    res.height,\r\n    ext.formatRGBA.internalFormat,\r\n    ext.formatRGBA.format,\r\n    ext.halfFloatTexType,\r\n    gl.NEAREST\r\n  )\r\n  render(target)\r\n\r\n  let texture = framebufferToTexture(gl, target)\r\n  let normalizedTexture = normalizeTexture(texture, target.width, target.height)\r\n\r\n  let captureCanvas = textureToCanvas(normalizedTexture, target.width, target.height)\r\n  let datauri = captureCanvas.toDataURL()\r\n  downloadURI('fluid.png', datauri)\r\n  URL.revokeObjectURL(datauri)\r\n}\r\n\r\nfunction framebufferToTexture(gl: WebGLRenderingContext, target: FBO): Float32Array {\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo)\r\n  let length = target.width * target.height * 4\r\n  let texture = new Float32Array(length)\r\n  gl.readPixels(0, 0, target.width, target.height, gl.RGBA, gl.FLOAT, texture)\r\n  return texture\r\n}\r\n\r\nfunction normalizeTexture(texture: Float32Array, width: number, height: number): Uint8Array {\r\n  let result = new Uint8Array(texture.length)\r\n  let id = 0\r\n  for (let i = height - 1; i >= 0; i--) {\r\n    for (let j = 0; j < width; j++) {\r\n      let nid = i * width * 4 + j * 4\r\n      result[nid + 0] = clamp01(texture[id + 0]) * 255\r\n      result[nid + 1] = clamp01(texture[id + 1]) * 255\r\n      result[nid + 2] = clamp01(texture[id + 2]) * 255\r\n      result[nid + 3] = clamp01(texture[id + 3]) * 255\r\n      id += 4\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nfunction clamp01(input: number): number {\r\n  return Math.min(Math.max(input, 0), 1)\r\n}\r\n\r\nfunction textureToCanvas(texture: Uint8Array, width: number, height: number): HTMLCanvasElement {\r\n  let captureCanvas = document.createElement('canvas')\r\n  let ctx = captureCanvas.getContext('2d')\r\n  if (!ctx) {\r\n    throw new Error('Could not get 2D context from canvas')\r\n  }\r\n\r\n  captureCanvas.width = width\r\n  captureCanvas.height = height\r\n\r\n  let imageData = ctx.createImageData(width, height)\r\n  imageData.data.set(texture)\r\n  ctx.putImageData(imageData, 0, 0)\r\n\r\n  return captureCanvas\r\n}\r\n\r\nfunction downloadURI(filename: string, uri: string): void {\r\n  let link = document.createElement('a')\r\n  link.download = filename\r\n  link.href = uri\r\n  document.body.appendChild(link)\r\n  link.click()\r\n  document.body.removeChild(link)\r\n}\r\n\r\nfunction makeFunGUI(gui: any, fun: () => void, name: string) {\r\n  gui\r\n    .add(\r\n      {\r\n        fun: () => {\r\n          fun()\r\n        }\r\n      },\r\n      'fun'\r\n    )\r\n    .name(name)\r\n}\r\n\r\nexport {\r\n  captureScreenshot,\r\n  clamp01,\r\n  downloadURI,\r\n  framebufferToTexture,\r\n  normalizeTexture,\r\n  startGUI,\r\n  textureToCanvas\r\n}\r\n\r\n// Export the interface type properly\r\nexport type { WebGLExtensions }\r\n","// remote.ts - Handles remote WebSocket control events\r\n\r\nimport { PointerPrototype } from './config'\r\nimport { Program } from './core-classes'\r\nimport { DoubleFBO, FBO } from './framebuffers'\r\nimport {\r\n  createCornerSplats,\r\n  createSplatsDown,\r\n  createSplatsHorizontal,\r\n  createSplatsLeft,\r\n  createSplatsRight,\r\n  createSplatsUp,\r\n  createSplatsVertical,\r\n  multipleSplats,\r\n  splatPointer\r\n} from './simulation'\r\n\r\n// Remote pointer instances (separate from local pointers)\r\nconst remotePointers: Map<string, PointerPrototype> = new Map()\r\n\r\n// WebSocket connection\r\nlet socket: WebSocket | null = null\r\nlet isConnected = false\r\n\r\n/**\r\n * Initialize WebSocket connection to server\r\n */\r\nexport function initRemoteControl(): void {\r\n  // Determine WebSocket URL based on current location\r\n  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'\r\n  const wsUrl = `${protocol}//${window.location.host}/ws`\r\n\r\n  // Create WebSocket connection\r\n  socket = new WebSocket(wsUrl)\r\n\r\n  // Setup event handlers\r\n  socket.onopen = handleSocketOpen\r\n  socket.onmessage = handleSocketMessage\r\n  socket.onclose = handleSocketClose\r\n  socket.onerror = handleSocketError\r\n\r\n  console.log('Remote control initialization started')\r\n}\r\n\r\n/**\r\n * Handle WebSocket open event\r\n */\r\nfunction handleSocketOpen(): void {\r\n  isConnected = true\r\n  console.log('WebSocket connection established')\r\n\r\n  // Send initial connection message\r\n  sendMessage({\r\n    type: 'connect',\r\n    payload: {\r\n      role: 'simulator'\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Handle incoming WebSocket messages\r\n */\r\nfunction handleSocketMessage(event: MessageEvent): void {\r\n  try {\r\n    const message = JSON.parse(event.data)\r\n\r\n    // Process different message types\r\n    switch (message.type) {\r\n      case 'connect_ack':\r\n        console.log(`Connected to server. Session ID: ${message.payload.sessionId}`)\r\n        break\r\n\r\n      case 'remote_input':\r\n        processRemoteInput(message.payload)\r\n        break\r\n\r\n      case 'command':\r\n        processRemoteCommand(message.payload)\r\n        break\r\n\r\n      default:\r\n        console.warn(`Unknown message type: ${message.type}`)\r\n    }\r\n  } catch (error) {\r\n    console.error('Error processing WebSocket message:', error)\r\n  }\r\n}\r\n\r\n/**\r\n * Process remote input events (mouse/touch)\r\n */\r\nfunction processRemoteInput(payload: any): void {\r\n  const { eventType, position, controllerId } = payload\r\n\r\n  // Get or create a remote pointer for this controller\r\n  let remotePointer = remotePointers.get(controllerId)\r\n  if (!remotePointer) {\r\n    remotePointer = new PointerPrototype()\r\n    remotePointer.id = controllerId\r\n    remotePointers.set(controllerId, remotePointer)\r\n  }\r\n\r\n  // Update pointer properties based on the event\r\n  switch (eventType) {\r\n    case 'mousedown':\r\n      remotePointer.down = true\r\n      remotePointer.moved = false\r\n      remotePointer.texcoordX = position.x\r\n      remotePointer.texcoordY = position.y\r\n      remotePointer.prevTexcoordX = position.x\r\n      remotePointer.prevTexcoordY = position.y\r\n      remotePointer.deltaX = 0\r\n      remotePointer.deltaY = 0\r\n\r\n      // Use provided color or generate one\r\n      if (payload.color) {\r\n        remotePointer.color = payload.color\r\n      }\r\n      break\r\n\r\n    case 'mousemove':\r\n      if (!remotePointer.down) return\r\n\r\n      remotePointer.prevTexcoordX = remotePointer.texcoordX\r\n      remotePointer.prevTexcoordY = remotePointer.texcoordY\r\n      remotePointer.texcoordX = position.x\r\n      remotePointer.texcoordY = position.y\r\n\r\n      // Calculate deltas (may need to adjust for aspect ratio)\r\n      remotePointer.deltaX = remotePointer.texcoordX - remotePointer.prevTexcoordX\r\n      remotePointer.deltaY = remotePointer.texcoordY - remotePointer.prevTexcoordY\r\n      remotePointer.moved = Math.abs(remotePointer.deltaX) > 0 || Math.abs(remotePointer.deltaY) > 0\r\n      break\r\n\r\n    case 'mouseup':\r\n      remotePointer.down = false\r\n      break\r\n  }\r\n}\r\n\r\n/**\r\n * Apply remote pointer to the simulation\r\n */\r\nexport function applyRemotePointers(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  // Process any queued remote pointers\r\n  remotePointers.forEach((pointer) => {\r\n    if (pointer.moved) {\r\n      pointer.moved = false // Reset after processing\r\n      splatPointer(gl, pointer, splatProgram, velocity, dye, canvas, blit)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Process remote command events\r\n */\r\nfunction processRemoteCommand(payload: any): void {\r\n  const { command, parameters } = payload\r\n\r\n  // These functions will be fully implemented when called with required parameters\r\n  switch (command) {\r\n    case 'random_splats':\r\n      applyRemoteRandomSplats(parameters?.count || 5)\r\n      break\r\n\r\n    case 'clear':\r\n      // Clear effect will be implemented as needed\r\n      break\r\n\r\n    case 'preset_pattern':\r\n      applyRemotePattern(parameters?.patternName || 'default')\r\n      break\r\n  }\r\n}\r\n\r\n/**\r\n * Global state for remote actions that need to be processed in the main loop\r\n */\r\ninterface RemoteActions {\r\n  randomSplats: number // Number of random splats to create\r\n  patternName: string | null // Pattern to apply\r\n}\r\n\r\nexport const remoteActions: RemoteActions = {\r\n  randomSplats: 0,\r\n  patternName: null\r\n}\r\n\r\n/**\r\n * Queue random splats for processing in main loop\r\n */\r\nfunction applyRemoteRandomSplats(count: number): void {\r\n  remoteActions.randomSplats = count\r\n}\r\n\r\n/**\r\n * Queue pattern for processing in main loop\r\n */\r\nfunction applyRemotePattern(patternName: string): void {\r\n  remoteActions.patternName = patternName\r\n}\r\n\r\n/**\r\n * Apply all queued remote actions (called from main update loop)\r\n */\r\nexport function processRemoteActions(\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  // Process any queued remote pointers\r\n  applyRemotePointers(gl, splatProgram, velocity, dye, canvas, blit)\r\n\r\n  // Process random splats\r\n  if (remoteActions.randomSplats > 0) {\r\n    multipleSplats(gl, remoteActions.randomSplats, splatProgram, velocity, dye, canvas, blit)\r\n    remoteActions.randomSplats = 0\r\n  }\r\n\r\n  // Process pattern commands\r\n  if (remoteActions.patternName) {\r\n    applyPattern(remoteActions.patternName, gl, splatProgram, velocity, dye, canvas, blit)\r\n    remoteActions.patternName = null\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a named pattern\r\n */\r\nfunction applyPattern(\r\n  patternName: string,\r\n  gl: WebGLRenderingContext,\r\n  splatProgram: Program,\r\n  velocity: DoubleFBO,\r\n  dye: DoubleFBO,\r\n  canvas: HTMLCanvasElement,\r\n  blit: (destination: FBO) => void\r\n): void {\r\n  switch (patternName) {\r\n    case 'right':\r\n      createSplatsRight(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    case 'left':\r\n      createSplatsLeft(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    case 'up':\r\n      createSplatsUp(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    case 'down':\r\n      createSplatsDown(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    case 'horizontal':\r\n      createSplatsHorizontal(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    case 'vertical':\r\n      createSplatsVertical(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    case 'corners':\r\n      createCornerSplats(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n    default:\r\n      // Default pattern - create splats in all directions\r\n      createSplatsRight(gl, splatProgram, velocity, dye, canvas, blit)\r\n      createSplatsLeft(gl, splatProgram, velocity, dye, canvas, blit)\r\n      break\r\n  }\r\n}\r\n\r\n/**\r\n * Handle WebSocket close event\r\n */\r\nfunction handleSocketClose(event: CloseEvent): void {\r\n  isConnected = false\r\n  console.log(`WebSocket connection closed: ${event.code} ${event.reason}`)\r\n\r\n  // Attempt to reconnect after delay\r\n  setTimeout(initRemoteControl, 5000)\r\n}\r\n\r\n/**\r\n * Handle WebSocket error\r\n */\r\nfunction handleSocketError(error: Event): void {\r\n  console.error('WebSocket error:', error)\r\n}\r\n\r\n/**\r\n * Send message to server\r\n */\r\nfunction sendMessage(message: any): void {\r\n  if (socket && isConnected) {\r\n    socket.send(JSON.stringify(message))\r\n  }\r\n}\r\n\r\n/**\r\n * Check if remote control is connected\r\n */\r\nexport function isRemoteControlConnected(): boolean {\r\n  return isConnected\r\n}\r\n\r\n/**\r\n * Clean up resources\r\n */\r\nexport function cleanup(): void {\r\n  if (socket) {\r\n    socket.close()\r\n    socket = null\r\n  }\r\n  remotePointers.clear()\r\n}\r\n","'use strict'\r\n\r\n// Import all components\r\nimport {\r\n  config,\r\n  getResolution,\r\n  isMobile,\r\n  PointerPrototype,\r\n  pointers,\r\n  scaleByPixelRatio,\r\n  splatStack\r\n} from './config'\r\n\r\nimport { getWebGLContext, WebGLExtensions } from './webgl-utils'\r\n\r\nimport {\r\n  createAdvectionShader,\r\n  createBaseVertexShader,\r\n  createBloomBlurShader,\r\n  createBloomFinalShader,\r\n  createBloomPrefilterShader,\r\n  createBlurShader,\r\n  createBlurVertexShader,\r\n  createCheckerboardShader,\r\n  createClearShader,\r\n  createColorShader,\r\n  createCopyShader,\r\n  createCurlShader,\r\n  createDivergenceShader,\r\n  createGradientSubtractShader,\r\n  createPressureShader,\r\n  createSplatShader,\r\n  createSunraysMaskShader,\r\n  createSunraysShader,\r\n  createVorticityShader,\r\n  displayShaderSource\r\n} from './shaders'\r\n\r\nimport { Material, Program } from './core-classes'\r\n\r\nimport {\r\n  createDoubleFBO,\r\n  createFBO,\r\n  createTextureAsync,\r\n  DoubleFBO,\r\n  FBO,\r\n  resizeDoubleFBO,\r\n  setupBlit,\r\n  TextureObject\r\n} from './framebuffers'\r\n\r\nimport { render } from './rendering'\r\n\r\nimport {\r\n  createCornerSplats,\r\n  createSplatsDown,\r\n  createSplatsHorizontal,\r\n  createSplatsLeft,\r\n  createSplatsRight,\r\n  createSplatsUp,\r\n  createSplatsVertical,\r\n  generateColor,\r\n  multipleSplats,\r\n  splatPointer,\r\n  step\r\n} from './simulation'\r\n\r\nimport { setupEventListeners } from './input'\r\n\r\nimport { startGUI } from './gui'\r\nimport { initRemoteControl, processRemoteActions } from './remote'\r\n\r\n// Define the debug info interface for TypeScript\r\ninterface DebugInfo {\r\n  frames: number\r\n  updateWebGLStatus: (status: string) => void\r\n  updateAnimationStatus: (status: string) => void\r\n  updateCanvasInfo: (dimensions: string) => void\r\n  incrementFrameCounter: () => void\r\n}\r\n\r\n// Extend the Window interface to include our debug property\r\ndeclare global {\r\n  interface Window {\r\n    debugInfo?: DebugInfo\r\n  }\r\n}\r\n\r\n// Global variables and context\r\nlet canvas: HTMLCanvasElement | null = null\r\nlet gl: WebGLRenderingContext | null = null\r\nlet ext: WebGLExtensions | null = null\r\nlet blit: (destination: FBO | null) => void\r\n\r\n// Shader instances\r\nlet baseVertexShader: WebGLShader\r\nlet blurVertexShader: WebGLShader\r\nlet blurShader: WebGLShader\r\nlet copyShader: WebGLShader\r\nlet clearShader: WebGLShader\r\nlet colorShader: WebGLShader\r\nlet checkerboardShader: WebGLShader\r\nlet bloomPrefilterShader: WebGLShader\r\nlet bloomBlurShader: WebGLShader\r\nlet bloomFinalShader: WebGLShader\r\nlet sunraysMaskShader: WebGLShader\r\nlet sunraysShader: WebGLShader\r\nlet splatShader: WebGLShader\r\nlet advectionShader: WebGLShader\r\nlet divergenceShader: WebGLShader\r\nlet curlShader: WebGLShader\r\nlet vorticityShader: WebGLShader\r\nlet pressureShader: WebGLShader\r\nlet gradientSubtractShader: WebGLShader\r\n\r\n// Programs\r\nlet blurProgram: Program\r\nlet copyProgram: Program\r\nlet clearProgram: Program\r\nlet colorProgram: Program\r\nlet checkerboardProgram: Program\r\nlet bloomPrefilterProgram: Program\r\nlet bloomBlurProgram: Program\r\nlet bloomFinalProgram: Program\r\nlet sunraysMaskProgram: Program\r\nlet sunraysProgram: Program\r\nlet splatProgram: Program\r\nlet advectionProgram: Program\r\nlet divergenceProgram: Program\r\nlet curlProgram: Program\r\nlet vorticityProgram: Program\r\nlet pressureProgram: Program\r\nlet gradienSubtractProgram: Program\r\n\r\n// Materials\r\nlet displayMaterial: Material\r\n\r\n// Framebuffers\r\nlet dye: DoubleFBO\r\nlet velocity: DoubleFBO\r\nlet divergence: FBO\r\nlet curl: FBO\r\nlet pressure: DoubleFBO\r\nlet bloom: FBO\r\nlet bloomFramebuffers: FBO[] = []\r\nlet sunrays: FBO\r\nlet sunraysTemp: FBO\r\n\r\n// Textures\r\nlet ditheringTexture: TextureObject\r\n\r\n// Main loop variables\r\nlet lastUpdateTime = Date.now()\r\nlet colorUpdateTimer = 0.0\r\nlet animationId: number\r\n\r\n// Helper functions\r\nfunction resizeCanvas(): boolean {\r\n  if (!canvas) {\r\n    return false\r\n  }\r\n\r\n  let width = scaleByPixelRatio(canvas.clientWidth)\r\n  let height = scaleByPixelRatio(canvas.clientHeight)\r\n\r\n  if (canvas.width != width || canvas.height != height) {\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    if (window.debugInfo && config.SHOW_DEBUG) {\r\n      window.debugInfo.updateCanvasInfo(`${width}x${height}`)\r\n    }\r\n\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction initFramebuffers(): void {\r\n  if (!gl || !ext) return\r\n\r\n  let simRes = getResolution(gl, config.SIM_RESOLUTION)\r\n  let dyeRes = getResolution(gl, config.DYE_RESOLUTION)\r\n\r\n  const texType = ext.halfFloatTexType\r\n  const rgba = ext.formatRGBA\r\n  const rg = ext.formatRG\r\n  const r = ext.formatR\r\n  const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\r\n\r\n  gl.disable(gl.BLEND)\r\n\r\n  if (dye == null)\r\n    dye = createDoubleFBO(\r\n      gl,\r\n      dyeRes.width,\r\n      dyeRes.height,\r\n      rgba.internalFormat,\r\n      rgba.format,\r\n      texType,\r\n      filtering\r\n    )\r\n  else\r\n    dye = resizeDoubleFBO(\r\n      gl,\r\n      copyProgram,\r\n      dye,\r\n      dyeRes.width,\r\n      dyeRes.height,\r\n      rgba.internalFormat,\r\n      rgba.format,\r\n      texType,\r\n      filtering,\r\n      blit\r\n    )\r\n\r\n  if (velocity == null)\r\n    velocity = createDoubleFBO(\r\n      gl,\r\n      simRes.width,\r\n      simRes.height,\r\n      rg.internalFormat,\r\n      rg.format,\r\n      texType,\r\n      filtering\r\n    )\r\n  else\r\n    velocity = resizeDoubleFBO(\r\n      gl,\r\n      copyProgram,\r\n      velocity,\r\n      simRes.width,\r\n      simRes.height,\r\n      rg.internalFormat,\r\n      rg.format,\r\n      texType,\r\n      filtering,\r\n      blit\r\n    )\r\n\r\n  divergence = createFBO(\r\n    gl,\r\n    simRes.width,\r\n    simRes.height,\r\n    r.internalFormat,\r\n    r.format,\r\n    texType,\r\n    gl.NEAREST\r\n  )\r\n  curl = createFBO(gl, simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST)\r\n  pressure = createDoubleFBO(\r\n    gl,\r\n    simRes.width,\r\n    simRes.height,\r\n    r.internalFormat,\r\n    r.format,\r\n    texType,\r\n    gl.NEAREST\r\n  )\r\n\r\n  initBloomFramebuffers()\r\n  initSunraysFramebuffers()\r\n}\r\n\r\nfunction initBloomFramebuffers(): void {\r\n  if (!gl || !ext) return\r\n\r\n  let res = getResolution(gl, config.BLOOM_RESOLUTION)\r\n\r\n  const texType = ext.halfFloatTexType\r\n  const rgba = ext.formatRGBA\r\n  const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\r\n\r\n  bloom = createFBO(gl, res.width, res.height, rgba.internalFormat, rgba.format, texType, filtering)\r\n\r\n  bloomFramebuffers.length = 0\r\n  for (let i = 0; i < config.BLOOM_ITERATIONS; i++) {\r\n    let width = res.width >> (i + 1)\r\n    let height = res.height >> (i + 1)\r\n\r\n    if (width < 2 || height < 2) break\r\n\r\n    let fbo = createFBO(gl, width, height, rgba.internalFormat, rgba.format, texType, filtering)\r\n    bloomFramebuffers.push(fbo)\r\n  }\r\n}\r\n\r\nfunction initSunraysFramebuffers(): void {\r\n  if (!gl || !ext) return\r\n\r\n  let res = getResolution(gl, config.SUNRAYS_RESOLUTION)\r\n\r\n  const texType = ext.halfFloatTexType\r\n  const r = ext.formatR\r\n  const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\r\n\r\n  sunrays = createFBO(gl, res.width, res.height, r.internalFormat, r.format, texType, filtering)\r\n  sunraysTemp = createFBO(gl, res.width, res.height, r.internalFormat, r.format, texType, filtering)\r\n}\r\n\r\nfunction updateKeywords(): void {\r\n  if (!displayMaterial) return\r\n\r\n  let displayKeywords: string[] = []\r\n  if (config.SHADING) displayKeywords.push('SHADING')\r\n  if (config.BLOOM) displayKeywords.push('BLOOM')\r\n  if (config.SUNRAYS) displayKeywords.push('SUNRAYS')\r\n  displayMaterial.setKeywords(displayKeywords)\r\n}\r\n\r\nfunction calcDeltaTime(): number {\r\n  let now = Date.now()\r\n  let dt = (now - lastUpdateTime) / 1000\r\n  dt = Math.min(dt, 0.016666)\r\n  lastUpdateTime = now\r\n  return dt\r\n}\r\n\r\nfunction updateColors(dt: number): void {\r\n  if (!config.COLORFUL) return\r\n\r\n  colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED\r\n  if (colorUpdateTimer >= 1) {\r\n    colorUpdateTimer = wrap(colorUpdateTimer, 0, 1)\r\n    pointers.forEach((p) => {\r\n      p.color = generateColor()\r\n    })\r\n  }\r\n}\r\n\r\nfunction applyInputs(): void {\r\n  if (!gl || !canvas) return\r\n\r\n  if (splatStack.length > 0 && splatStack[splatStack.length - 1] !== undefined) {\r\n    const amount = splatStack.pop()\r\n    if (amount !== undefined) {\r\n      multipleSplats(\r\n        gl as WebGLRenderingContext,\r\n        amount,\r\n        splatProgram,\r\n        velocity,\r\n        dye,\r\n        canvas as HTMLCanvasElement,\r\n        blit\r\n      )\r\n    }\r\n  }\r\n\r\n  pointers.forEach((p) => {\r\n    if (p.moved) {\r\n      p.moved = false\r\n      splatPointer(\r\n        gl as WebGLRenderingContext,\r\n        p,\r\n        splatProgram,\r\n        velocity,\r\n        dye,\r\n        canvas as HTMLCanvasElement,\r\n        blit\r\n      )\r\n    }\r\n  })\r\n}\r\n\r\n// Update function called on each animation frame\r\nfunction update(): void {\r\n  if (!gl || !canvas) return\r\n\r\n  const dt = calcDeltaTime()\r\n  if (resizeCanvas()) initFramebuffers()\r\n  updateColors(dt)\r\n  applyInputs()\r\n\r\n  // Process any remote inputs\r\n  if (gl && canvas) {\r\n    processRemoteActions(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n\r\n  // Run simulation steps if not paused\r\n  if (!config.PAUSED) {\r\n    step(\r\n      gl,\r\n      dt,\r\n      velocity,\r\n      dye,\r\n      curl,\r\n      divergence,\r\n      pressure,\r\n      curlProgram,\r\n      vorticityProgram,\r\n      divergenceProgram,\r\n      clearProgram,\r\n      pressureProgram,\r\n      gradienSubtractProgram,\r\n      advectionProgram,\r\n      blit\r\n    )\r\n  }\r\n\r\n  // Always render\r\n  render(\r\n    gl,\r\n    null,\r\n    dye,\r\n    bloom,\r\n    sunrays,\r\n    sunraysTemp,\r\n    ditheringTexture,\r\n    displayMaterial,\r\n    colorProgram,\r\n    checkerboardProgram,\r\n    blit,\r\n    bloomFramebuffers,\r\n    bloomPrefilterProgram,\r\n    bloomBlurProgram,\r\n    bloomFinalProgram,\r\n    sunraysMaskProgram,\r\n    sunraysProgram,\r\n    blurProgram\r\n  )\r\n\r\n  // Ensure animation continues with proper binding to window\r\n  animationId = window.requestAnimationFrame(update)\r\n}\r\n\r\n// Initialization function\r\nfunction init(): void {\r\n  if (!canvas || !gl || !ext) return\r\n\r\n  // Update debug info\r\n  if (window.debugInfo) {\r\n    window.debugInfo.updateWebGLStatus(\r\n      `Initialized (WebGL${gl instanceof WebGL2RenderingContext ? '2' : '1'})`\r\n    )\r\n\r\n    // Set initial display state of debug info\r\n    const debugElement = document.getElementById('debug-info')\r\n    if (debugElement) {\r\n      debugElement.style.display = config.SHOW_DEBUG ? 'block' : 'none'\r\n    }\r\n  }\r\n\r\n  if (isMobile()) {\r\n    config.DYE_RESOLUTION = 512\r\n  }\r\n  if (!ext.supportLinearFiltering) {\r\n    config.DYE_RESOLUTION = 512\r\n    config.SHADING = false\r\n    config.BLOOM = false\r\n    config.SUNRAYS = false\r\n  }\r\n\r\n  // Setup blit function\r\n  blit = setupBlit(gl)\r\n\r\n  // Create shader instances\r\n  baseVertexShader = createBaseVertexShader(gl)\r\n  blurVertexShader = createBlurVertexShader(gl)\r\n  blurShader = createBlurShader(gl)\r\n  copyShader = createCopyShader(gl)\r\n  clearShader = createClearShader(gl)\r\n  colorShader = createColorShader(gl)\r\n  checkerboardShader = createCheckerboardShader(gl)\r\n  bloomPrefilterShader = createBloomPrefilterShader(gl)\r\n  bloomBlurShader = createBloomBlurShader(gl)\r\n  bloomFinalShader = createBloomFinalShader(gl)\r\n  sunraysMaskShader = createSunraysMaskShader(gl)\r\n  sunraysShader = createSunraysShader(gl)\r\n  splatShader = createSplatShader(gl)\r\n  advectionShader = createAdvectionShader(gl, ext)\r\n  divergenceShader = createDivergenceShader(gl)\r\n  curlShader = createCurlShader(gl)\r\n  vorticityShader = createVorticityShader(gl)\r\n  pressureShader = createPressureShader(gl)\r\n  gradientSubtractShader = createGradientSubtractShader(gl)\r\n\r\n  // Create programs\r\n  blurProgram = new Program(gl, blurVertexShader, blurShader)\r\n  copyProgram = new Program(gl, baseVertexShader, copyShader)\r\n  clearProgram = new Program(gl, baseVertexShader, clearShader)\r\n  colorProgram = new Program(gl, baseVertexShader, colorShader)\r\n  checkerboardProgram = new Program(gl, baseVertexShader, checkerboardShader)\r\n  bloomPrefilterProgram = new Program(gl, baseVertexShader, bloomPrefilterShader)\r\n  bloomBlurProgram = new Program(gl, baseVertexShader, bloomBlurShader)\r\n  bloomFinalProgram = new Program(gl, baseVertexShader, bloomFinalShader)\r\n  sunraysMaskProgram = new Program(gl, baseVertexShader, sunraysMaskShader)\r\n  sunraysProgram = new Program(gl, baseVertexShader, sunraysShader)\r\n  splatProgram = new Program(gl, baseVertexShader, splatShader)\r\n  advectionProgram = new Program(gl, baseVertexShader, advectionShader)\r\n  divergenceProgram = new Program(gl, baseVertexShader, divergenceShader)\r\n  curlProgram = new Program(gl, baseVertexShader, curlShader)\r\n  vorticityProgram = new Program(gl, baseVertexShader, vorticityShader)\r\n  pressureProgram = new Program(gl, baseVertexShader, pressureShader)\r\n  gradienSubtractProgram = new Program(gl, baseVertexShader, gradientSubtractShader)\r\n\r\n  // Create display material\r\n  displayMaterial = new Material(gl, baseVertexShader, displayShaderSource)\r\n\r\n  // Load dithering texture\r\n  ditheringTexture = createTextureAsync(gl, '/LDR_LLL1_0.png')\r\n\r\n  // Initialize framebuffers\r\n  initFramebuffers()\r\n  updateKeywords()\r\n\r\n  // Initialize remote control\r\n  initRemoteControl()\r\n\r\n  // Start GUI\r\n  const customSplatsRight = (): void => {\r\n    if (!gl || !canvas) return\r\n    createSplatsRight(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  const customSplatsLeft = (): void => {\r\n    if (!gl || !canvas) return\r\n    createSplatsLeft(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  const customSplatsUp = (): void => {\r\n    if (!gl || !canvas) return\r\n    createSplatsUp(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  const customSplatsDown = (): void => {\r\n    if (!gl || !canvas) return\r\n    createSplatsDown(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  const customSplatsHorizontal = (): void => {\r\n    if (!gl || !canvas) return\r\n    createSplatsHorizontal(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  const customSplatsVertical = (): void => {\r\n    if (!gl || !canvas) return\r\n    createSplatsVertical(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  const customCornerSplats = (): void => {\r\n    if (!gl || !canvas) return\r\n    createCornerSplats(gl, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n\r\n  startGUI(\r\n    customSplatsHorizontal,\r\n    customSplatsVertical,\r\n    customSplatsRight,\r\n    customSplatsLeft,\r\n    customSplatsUp,\r\n    customSplatsDown,\r\n    customCornerSplats,\r\n    initFramebuffers,\r\n    updateKeywords\r\n  )\r\n\r\n  // Create initial splats\r\n  if (gl && canvas) {\r\n    multipleSplats(\r\n      gl,\r\n      parseInt(Math.random() * 20 + '') + 5,\r\n      splatProgram,\r\n      velocity,\r\n      dye,\r\n      canvas,\r\n      blit\r\n    )\r\n  }\r\n\r\n  // Setup event listeners\r\n  const customSplatPointer = (pointer: PointerPrototype): void => {\r\n    if (!gl || !canvas) return\r\n    splatPointer(gl, pointer, splatProgram, velocity, dye, canvas, blit)\r\n  }\r\n  setupEventListeners(canvas, customSplatPointer)\r\n\r\n  // Start the main loop\r\n  if (window.debugInfo && config.SHOW_DEBUG) {\r\n    window.debugInfo.updateAnimationStatus('Starting')\r\n  }\r\n  update()\r\n}\r\n\r\n// Main script - initialize the app when the DOM is ready\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  canvas = document.getElementsByTagName('canvas')[0]\r\n  if (!canvas) {\r\n    return\r\n  }\r\n\r\n  // Update canvas info\r\n  if (window.debugInfo && config.SHOW_DEBUG) {\r\n    window.debugInfo.updateCanvasInfo(`${canvas.clientWidth}x${canvas.clientHeight}`)\r\n  }\r\n\r\n  const webglContext = getWebGLContext(canvas)\r\n  gl = webglContext.gl\r\n  ext = webglContext.ext\r\n\r\n  if (gl && ext) {\r\n    if (window.debugInfo && config.SHOW_DEBUG) {\r\n      window.debugInfo.updateWebGLStatus('Context acquired')\r\n    }\r\n    init()\r\n\r\n    // Handle window focus/blur to prevent animation freezing\r\n    window.addEventListener('focus', () => {\r\n      if (window.debugInfo && config.SHOW_DEBUG) {\r\n        window.debugInfo.updateAnimationStatus('Resuming after focus')\r\n      }\r\n      lastUpdateTime = Date.now()\r\n      if (!animationId) {\r\n        animationId = window.requestAnimationFrame(update)\r\n      }\r\n    })\r\n\r\n    window.addEventListener('blur', () => {\r\n      if (window.debugInfo && config.SHOW_DEBUG) {\r\n        window.debugInfo.updateAnimationStatus('Paused (window blur)')\r\n      }\r\n      if (animationId) {\r\n        window.cancelAnimationFrame(animationId)\r\n        animationId = 0\r\n      }\r\n    })\r\n  } else {\r\n    if (window.debugInfo && config.SHOW_DEBUG) {\r\n      window.debugInfo.updateWebGLStatus('Error: WebGL initialization failed')\r\n    }\r\n  }\r\n})\r\n\r\n// Wrap function from config.js for internal use\r\nfunction wrap(value: number, min: number, max: number): number {\r\n  const range = max - min\r\n  if (range == 0) return min\r\n  return ((value - min) % range) + min\r\n}\r\n\r\n// Export global variables and context for other modules\r\nexport {\r\n  animationId,\r\n  blit,\r\n  bloom,\r\n  bloomFramebuffers,\r\n  curl,\r\n  ditheringTexture,\r\n  divergence,\r\n  dye,\r\n  ext,\r\n  gl,\r\n  initFramebuffers,\r\n  lastUpdateTime,\r\n  pressure,\r\n  sunrays,\r\n  sunraysTemp,\r\n  update,\r\n  updateKeywords,\r\n  velocity,\r\n  wrap\r\n}\r\n"],"names":["config","PointerPrototype","__publicField","pointers","splatStack","isMobile","getResolution","gl","resolution","aspectRatio","min","max","scaleByPixelRatio","input","pixelRatio","getWebGLContext","canvas","params","isWebGL2","halfFloat","supportLinearFiltering","halfFloatTexType","formatRGBAResult","getSupportedFormat","formatRGBA","formatRGResult","formatRG","formatRResult","internalFormat","format","type","supportRenderTextureFormat","texture","fbo","hashCode","s","hash","i","compileShader","source","keywords","addKeywords","shader","keywordsString","keyword","createProgram","vertexShader","fragmentShader","program","getUniforms","uniforms","uniformCount","activeUniform","uniformName","uniformLocation","getTextureScale","width","height","createBaseVertexShader","createBlurVertexShader","createBlurShader","createCopyShader","createClearShader","createColorShader","createCheckerboardShader","displayShaderSource","createBloomPrefilterShader","createBloomBlurShader","createBloomFinalShader","createSunraysMaskShader","createSunraysShader","createSplatShader","createAdvectionShader","ext","createDivergenceShader","createCurlShader","createVorticityShader","createPressureShader","createGradientSubtractShader","Material","fragmentShaderSource","newProgram","Program","createFBO","w","h","param","texelSizeX","texelSizeY","id","createDoubleFBO","fbo1","fbo2","value","temp","resizeFBO","copyProgram","target","blit","newFBO","resizeDoubleFBO","createTextureAsync","url","obj","image","setupBlit","buffer","indexBuffer","clear","render","dye","bloom","sunrays","_sunraysTemp","ditheringTexture","displayMaterial","colorProgram","checkerboardProgram","bloomFramebuffers","bloomPrefilterProgram","bloomBlurProgram","bloomFinalProgram","sunraysMaskProgram","sunraysProgram","blurProgram","applyBloom","applySunrays","blur","drawColor","normalizeColor","drawCheckerboard","drawDisplay","color","scale","destination","last","knee","curve0","curve1","curve2","dest","baseTex","mask","iterations","step","dt","velocity","curl","divergence","pressure","curlProgram","vorticityProgram","divergenceProgram","clearProgram","pressureProgram","gradienSubtractProgram","advectionProgram","splatPointer","pointer","splatProgram","dx","dy","splat","multipleSplats","amount","generateColor","x","y","correctRadius","radius","createSplatsRight","splatCount","splatInterval","splatSpeed","createSplatsLeft","createSplatsUp","createSplatsHorizontal","createSplatsVertical","createSplatsDown","createCornerSplats","corner","c","HSVtoRGB","v","r","g","b","f","p","q","t","updatePointerDownData","posX","posY","updatePointerMoveData","correctDeltaX","correctDeltaY","updatePointerUpData","delta","setupEventListeners","e","touches","startGUI","initFramebuffers","updateKeywords","gui","debugElement","splatFolder","makeFunGUI","bloomFolder","sunraysFolder","captureFolder","fun","name","remotePointers","socket","isConnected","initRemoteControl","wsUrl","handleSocketOpen","handleSocketMessage","handleSocketClose","handleSocketError","sendMessage","event","message","processRemoteInput","processRemoteCommand","error","payload","eventType","position","controllerId","remotePointer","applyRemotePointers","command","parameters","applyRemoteRandomSplats","applyRemotePattern","remoteActions","count","patternName","processRemoteActions","applyPattern","baseVertexShader","blurVertexShader","blurShader","copyShader","clearShader","colorShader","checkerboardShader","bloomPrefilterShader","bloomBlurShader","bloomFinalShader","sunraysMaskShader","sunraysShader","splatShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","sunraysTemp","lastUpdateTime","colorUpdateTimer","animationId","resizeCanvas","simRes","dyeRes","texType","rgba","rg","filtering","initBloomFramebuffers","initSunraysFramebuffers","res","displayKeywords","calcDeltaTime","now","updateColors","wrap","applyInputs","update","init","webglContext","range"],"mappings":"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"}